<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Necisam's blog]]></title>
  <link href="https://king4sam.github.io/atom.xml" rel="self"/>
  <link href="https://king4sam.github.io/"/>
  <updated>2017-04-28T00:08:36+08:00</updated>
  <id>https://king4sam.github.io/</id>
  <author>
    <name><![CDATA[Necisam]]></name>
    <email><![CDATA[king4sam990816@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SS-week2]]></title>
    <link href="https://king4sam.github.io/blog/2017/04/27/ss-week2/"/>
    <updated>2017-04-27T15:48:18+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/04/27/ss-week2</id>
    <content type="html"><![CDATA[<h1 id="information-theory">Information Theory</h1>

<!--more-->

<h2 id="information-storage">Information Storage</h2>

<p>訊號分成 analog 跟 digital</p>

<p>大致討論的結果(只記得這些…)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">type</th>
      <th>pros</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">digital</td>
      <td>電腦可讀 可驗證 易編輯</td>
    </tr>
    <tr>
      <td style="text-align: left">analog</td>
      <td>能保存較原始資料</td>
    </tr>
  </tbody>
</table>

<p>2000年後 digit 資料量爆炸性成長</p>

<p><img src="http://media3.washingtonpost.com/wp-dyn/content/graphic/2011/02/11/GR2011021100614.jpg" /></p>

<h2 id="information-value">Information Value</h2>

<h3 id="more-information">More Information?</h3>

<p>左邊 還是 右邊 給我們比較<strong>多</strong>的資訊???</p>

<p><img src="https://king4sam.github.io/images/ss/infovalue.png" /></p>

<p>幾乎大家一致認同左邊</p>

<p>但那是因為左邊是我們認得的語言</p>

<p>想像如果右邊是另一種語言</p>

<p>可能不同的音調、個數、行數等等都代表不同意義</p>

<p>這樣右邊會不會也是能帶給我們跟左邊一樣的資訊量呢🤔🤔🤔</p>

<h3 id="measure-information-value">Measure Information value</h3>

<p>那我們又如何衡量資訊的價值呢?</p>

<p>試問下面三個投擲硬幣的結果
那一個sequence比較有價值?</p>

<p><img src="https://king4sam.github.io/images/ss/measureinfo.png" /></p>

<p><em>Hint : 隨便挖掉其中一個擲硬幣的結果，你有辦法填回去嗎?</em></p>

<p>明顯的two-head coin 我們可以直接填H回去</p>

<p>weighted coin 我們會猜H(H 出現機率比較大)</p>

<p>而fair coin 我們就無法做出猜測</p>

<h4 id="information-entropy">Information Entropy</h4>
<p>disorder, unpredictability, uncertainty of information</p>

<p>(記得高中老師說熵就是亂度</p>

<p>以下的計算皆以密碼為例</p>

<p>可用字元 b 個
密碼長度 n 個</p>

<p>可用密碼數(combinations)</p>

<script type="math/tex; mode=display">b^{n}</script>

<p>存儲密碼所需要的位元數(bits of entropy)</p>

<script type="math/tex; mode=display">\log{b^{n}}</script>

<h4 id="shannon-entropy-entropy-of-given-set-of-characters">Shannon Entropy( Entropy of given set of characters)</h4>

<ul>
  <li>
    <p>整串密碼中每個字的平均消息量</p>
  </li>
  <li>
    <p>How many questions would we expect to ask to find an element from a set of characters?</p>
  </li>
  <li>
    <p>char出現時所需要問的次數的期望值
  = 每個char出現的機率 * 出現時所需要問題次數</p>
  </li>
  <li>
    <p>formula</p>
  </li>
</ul>

<script type="math/tex; mode=display">H(X) = E[I(X)] = E[-\ln(P(X))]
\\
H(X) = \Sigma{P(x_i)I(x_i)} = - \Sigma{P(x_i)\log_b{P(x_i)}}, b = 2</script>

<ul>
  <li>implement</li>
</ul>

<figure class="code"><figcaption><span>Shannon Entropy in ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">entropy</span> <span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class="line">  <span class="n">e</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="n">sz</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">to_f</span>
</span><span class="line">  <span class="n">b</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">bytes</span>
</span><span class="line">  <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">/</span><span class="n">sz</span>
</span><span class="line">    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class="line">      <span class="n">e</span> <span class="o">+=</span> <span class="o">-</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">/</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">e</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>但當我們在用Shannon Entropy下去對密碼做分析的話</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">password type</th>
      <th style="text-align: center">sample password</th>
      <th style="text-align: right">bits of entropy</th>
      <th style="text-align: right">Shannon Enrtopy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">length = 8, lowercase letters only</td>
      <td style="text-align: center">cvobmsla</td>
      <td style="text-align: right">37.60</td>
      <td style="text-align: right">3.0</td>
    </tr>
    <tr>
      <td style="text-align: center">length = 8, lowercase + uppercase letters</td>
      <td style="text-align: center">jAcieDlq</td>
      <td style="text-align: right">45.60</td>
      <td style="text-align: right">3.0</td>
    </tr>
    <tr>
      <td style="text-align: center">length = 8, letters + digits</td>
      <td style="text-align: center">bA29Fs4f</td>
      <td style="text-align: right">47.63</td>
      <td style="text-align: right">3</td>
    </tr>
    <tr>
      <td style="text-align: center">whole words<br />(4 words chosen at random from 2048 word dictionary)</td>
      <td style="text-align: center">placidmealerrorpast</td>
      <td style="text-align: right">44</td>
      <td style="text-align: right">3.53</td>
    </tr>
  </tbody>
</table>

<p>增加了char，密碼變的更複雜，但似乎沒有增加enyropy</p>

<p>反而是原先認為容易被字典攻擊法攻擊的whole word 表現不差</p>

<p>而且雖然英數字組合的bits of entropy高，但人類不會偏好隨機的組合</p>

<p>因此實際會被用的組合數還要再下修</p>

<p>反觀whole word的組合數就是真實中的problem space -&gt; 沒有捷徑猜密碼</p>

<p><strong>People who don’t understand information theory and security</strong></p>

<p>別期待user會使用隨機組合的密碼</p>

<p>(譯: 過去二十年，我們努力讓每個人用人類更難記，但電腦很好猜的密碼)
<img src="https://imgs.xkcd.com/comics/password_strength.png" /></p>

<hr />

<p>後面是開發環境介紹跟一些bit operation</p>

<p>我就略過</p>

<p>但要特別筆記一下XOR</p>

<p>真值表大家都會記</p>

<p>重點是xor有這個特質</p>

<script type="math/tex; mode=display">P \oplus K = C
\\
C \oplus K = P</script>

<p>這個magic讓xor在一些地方有神奇功用</p>

<p>例如</p>

<ul>
  <li>兩數互換不用第三個變數</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">){</span>
</span><span class="line">  <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">a</span> <span class="o">!=</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">      <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">      <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<ul>
  <li>
    <p>One-time Pad Cipher(week4)</p>
  </li>
  <li>
    <p>某天寄來的code challenge</p>
  </li>
</ul>

<p>implements function</p>

<p>xor product(N,M) = N ^ N+1 … ^ M-1 ^ M</p>

<p>要求</p>

<p>complexity O(log(N))</p>

<p>mem space usage O(1)</p>

<p>其實看到log(N)就大概想應該是要binary下去找</p>

<p>後來看到一個解法</p>

<p>令f(n) = xor product(0,n)</p>

<p>發現有規律</p>

<p>0000 &lt;- 0  [a]<br />
0001 &lt;- 1  [1]<br />
0010 &lt;- 3  [a+1]<br />
0011 &lt;- 0  [0]<br />
0100 &lt;- 4  [a]<br />
0101 &lt;- 1  [1]<br />
0110 &lt;- 7  [a+1]<br /></p>

<p>b(n) 用來查表 求出 xor product(0,n) 跟 xor product(0,m)</p>

<p>兩個再做xor 就會變成 xor product(n,m)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS-week1]]></title>
    <link href="https://king4sam.github.io/blog/2017/04/19/ss-week1/"/>
    <updated>2017-04-19T23:37:56+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/04/19/ss-week1</id>
    <content type="html"><![CDATA[<h1 id="security-and-service">Security and Service</h1>

<!--more-->

<p>既然課名都叫 Security and Security
一開始當然是先討論什麼是 Security，什麼是 Security</p>

<h2 id="security">security</h2>

<ul>
  <li>Scenario A: Traveling in a foreign country</li>
  <li>Scenario B: Shopping online at a new website</li>
</ul>

<p>年代久遠，我忘記當初到底討論出哪些點了 😩</p>

<p>總之寫了四分之一黑板</p>

<p>而這些點最後又被歸類為以下六個面向</p>

<h2 id="information-security-dimensions">Information Security Dimensions</h2>
<ul>
  <li>Availability : available for operation and use
<br />可用性</li>
  <li>Authentication : prove who you are
<br />身份驗證</li>
  <li>Authorization : the accessment to the information
<br />授權</li>
  <li>Confidentiality : confidential is protected
<br />保密</li>
  <li>Integrity : the quality of being honest
<br />可以偵測資料是否被竄改過</li>
  <li>Non-repudiation :
<br />不可否認性(ex 發票證明交易確實發生過)</li>
</ul>

<p>最後再提供一些新聞，大家討論問題是發生在哪個面向</p>

<p><img src="https://king4sam.github.io/images/ss/hospital_robbed.png" />
<img src="https://king4sam.github.io/images/ss/zomato.png" /></p>

<h2 id="service">Service</h2>

<p>沒有討論太多，記得是認為</p>

<p>providing values 就是個 Service</p>

<p><del>順便幫下學期的soa打個廣告XDD<del></del></del></p>

<hr />

<h2 id="meet-your-tools">Meet Your Tools</h2>

<p>這學期會用的都有以下特質</p>

<ul>
  <li>Free</li>
  <li>Open Source</li>
  <li>Low-level Mastery</li>
</ul>

<h2 id="ruby">ruby</h2>

<p>老師說他最愛readable的特性</p>

<h2 id="linux">linux</h2>
<p>身為攻城獅你說你不會用linux?</p>

<p>大三屁孩或用mac裝潮的就算了</p>

<p>我絕對不是說當助教時遇到的奇葩學生</p>

<h2 id="codecademy">Codecademy</h2>
<p>Learn to code interactively, for free.</p>

<h2 id="canvas-and-slack">Canvas and Slack</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS-week7]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/31/ss-week7/"/>
    <updated>2017-03-31T10:37:03+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/31/ss-week7</id>
    <content type="html"><![CDATA[<h1 id="web-services-and-security">Web Services and Security</h1>

<!--more-->

<h2 id="internet-and-tcpip">Internet and TCP/IP</h2>

<ul>
  <li><a href="http://www.youtube.com/watch?v=9hIQjrMHTv4">科普時間</a></li>
  <li>但老師連字幕都沒開變成在聽力測驗QQ</li>
</ul>

<h2 id="http">HTTP:</h2>

<ul>
  <li>Persistent but Stateless</li>
  <li>not a whole conversation</li>
  <li>just a line of message/request</li>
  <li>
    <p>Request and Resoinse Msg</p>
  </li>
  <li>(HTTPie)[https://httpie.org] : cmd tool designed for painless debugging and interaction with HTTP servers, RESTful APIs, and web services</li>
</ul>

<h2 id="http-methods">HTTP methods</h2>

<ul>
  <li>Safety : Never change the resources</li>
  <li>Idempotence : can be called many times without different outcome</li>
</ul>

<table>
  <thead>
    <tr>
      <th>HTTP method</th>
      <th>Safety</th>
      <th>Idempotence</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GET</td>
      <td>Y</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>POST</td>
      <td>N</td>
      <td>N</td>
    </tr>
    <tr>
      <td>PUT</td>
      <td>N</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>DELETE</td>
      <td>N</td>
      <td>Y</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>usage example :
google search use GET method
GET parameter is saved in url so that you can save the search result as a bookmark</li>
</ul>

<h2 id="http-status-code">HTTP status code</h2>

<ul>
  <li>DON’T be lazy, lookup  the <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">table</a></li>
</ul>

<hr />

<h1 id="happycoding-time--">Happy(Coding) time ~ 之前要先有</h1>

<h1 id="section">出場人員介紹👏👏👏</h1>

<h2 id="sinatrahttpsgithubcomsinatrasinatra"><a href="https://github.com/sinatra/sinatra">Sinatra</a></h2>
<ul>
  <li>Web Application Framework</li>
  <li>Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort
(介紹就這麼簡短，官網甚至一進去只看到sample code)</li>
</ul>

<h3 id="run-server">run server</h3>

<ul>
  <li>Execute Rack based web application as per config.ru</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">rackup
</span></code></pre></td></tr></table></div></figure>

<h2 id="bundlerhttpbundlerio"><a href="http://bundler.io">Bundler</a></h2>
<ul>
  <li>provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed.</li>
</ul>

<h3 id="install">install</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">gem install bundler
</span></code></pre></td></tr></table></div></figure>

<h3 id="execution">execution</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>Gemfile.lock stores which version of gems should be installed</li>
</ul>

<h3 id="executionsuggestion">execution(suggestion)</h3>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">bundle exec rake
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>ensures following command is only run with gems specified in Gemfile.lock</li>
</ul>

<h2 id="rakehttpsgithubcomrubyrake"><a href="https://github.com/ruby/rake">rake</a></h2>
<ul>
  <li>Ruby make</li>
</ul>

<h3 id="simple-example">simple example</h3>

<figure class="code"><figcaption><span>task simple</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">task</span> <span class="ss">default</span><span class="p">:</span> <span class="sx">%w[test]</span>
</span><span class="line"><span class="n">task</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">ruby</span> <span class="s2">&quot;test/unittest.rb&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h1 id="coding-time">真正的coding time~</h1>

<p>Ruby 語法的部分就略過不說了</p>

<h2 id="model">model</h2>
<ul>
  <li>一般的class</li>
  <li>這次spec 要求implement 下列 methods
    <ul>
      <li>initialize</li>
      <li>save</li>
      <li>find</li>
      <li>all</li>
      <li>to_json</li>
    </ul>
  </li>
</ul>

<h2 id="controller">controller</h2>
<ul>
  <li>必需繼承 Sinatra::Base, rack才認得它</li>
  <li>requirement
    <ul>
      <li>get /sourece : return details of a specific resource</li>
      <li>get /sourece/id : return an index of all resources</li>
      <li>post : create a new resource</li>
    </ul>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ShareConfigurationsAPI</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="n">configure</span> <span class="k">do</span>
</span><span class="line">    <span class="c1">#Configure Sinatra settings</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">get</span> <span class="s1">&#39;/?&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># root route for anything</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">post</span> <span class="s1">&#39;/api/v1/configurations/?&#39;</span> <span class="k">do</span>
</span><span class="line">    <span class="c1"># a post route</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h2 id="security-threats">Security Threats</h2>

<p>當然目前的服務很簡單，也有很多漏洞
下面列了一些，之後我們都會一個一個來解決</p>

<ul>
  <li>Threat: Confidentiality
    <ul>
      <li>Stored resources could be stolen if server is compromised</li>
      <li>Vulnerability: User resources are not being encrypted</li>
      <li>Vector: Attacker with access to server can read whole data store</li>
    </ul>
  </li>
  <li>Threat: Authorization, Authentication
    <ul>
      <li>Information about resources is not private</li>
      <li>Vulnerability: App does not check if user is authorized to see resource</li>
      <li>Vector: Anyone can access any data by knowing its public URL</li>
    </ul>
  </li>
  <li>Threat: Integrity, Bug
    <ul>
      <li>:id random key generator could produce collisions</li>
      <li>Vulnerability: random key generator produces same keys within given second</li>
      <li>Vector: send multiple POST ‘/resource’ requests within same second</li>
    </ul>
  </li>
  <li>Threat: Integrity
    <ul>
      <li>User could destroy earlier resources</li>
      <li>Vulnerability: app does not check if :id key is being sent along with POST request</li>
      <li>Vector: send :id along with POST request to see if app overwrite earlier resource</li>
    </ul>
  </li>
  <li>Threat: All dimensions
    <ul>
      <li>Dependencies (gems) could have vulnerabilities</li>
      <li>Vulnerability: gems could allow attacks (denial of service, remote code execution, etc.)</li>
      <li>Vector: send a payload to a route that will likely invoke a particular dependency (gem)</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS Week5]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/27/ss-week5/"/>
    <updated>2017-03-27T14:19:35+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/27/ss-week5</id>
    <content type="html"><![CDATA[<h1 id="symmetric-cryptographycont">Symmetric Cryptography(Con’t)</h1>

<!--more-->

<h2 id="stream-ciphers">Stream Ciphers</h2>

<ol>
  <li>A5/1 Cipher (GSM)
    <ul>
      <li>Produces keystream bit at each step</li>
      <li>Easy to implement in hardware</li>
    </ul>
  </li>
</ol>

<p><img src="https://king4sam.github.io/images/studynotes/a51.png" />
2. RC4 Cipher</p>

<ul>
  <li>Produces keystream byte at each step</li>
  <li>One of the most widely used software stream ciphers
    <ul>
      <li>in older implementations of SSL /TLS; WEP(!)</li>
      <li>removed from major browsers in 2015</li>
    </ul>
  </li>
</ul>

<h2 id="block-ciphers">Block Ciphers</h2>

<ol>
  <li>Feistel Cipher
    <ul>
      <li>key will change every round</li>
      <li>function F must be reversible</li>
      <li>multiple “rounds”</li>
    </ul>
  </li>
</ol>

<p><img src="https://king4sam.github.io/images/studynotes/feistel.png" /></p>

<h2 id="block-cipher-modes">Block Cipher Modes</h2>

<ol>
  <li>Electronic Code Book (ECB) Mode
  <img src="https://king4sam.github.io/images/studynotes/ecb.png" />
    <ul>
      <li>將plain text切成 blocks</li>
      <li>分別對每個block做Block Ciphers</li>
      <li>缺點:同樣的block會被加密成同樣的cipher</li>
      <li>diffusion較差</li>
    </ul>
  </li>
  <li>Cipher Block Chaining (CBC) Mode
  <img src="https://king4sam.github.io/images/studynotes/cbc.png" />
    <ul>
      <li>跟ECB類似</li>
      <li>在做完Block Ciphers，會在跟前一個block的結果做xor，成為最後加密的結果</li>
      <li>改善diffusion</li>
      <li>最後一個block可以當<a href="#data-integrity-mac-blocksmessage-authentication-code">MAC</a> blocks(包含整個plain text的資訊)</li>
    </ul>
  </li>
  <li>Comparison</li>
</ol>

<p>ECB   V.S  CBC</p>

<p><img src="https://king4sam.github.io/images/studynotes/ecbgirl.png" width="280" /><img src="https://king4sam.github.io/images/studynotes/cbcgirl.png" width="280" /></p>

<h2 id="aes-cipher">AES Cipher</h2>
<ul>
  <li>most popular nowadays</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/aes.png" /></p>

<h2 id="symmetric-key-ciphers-and-key-reuse">Symmetric Key Ciphers and Key Reuse</h2>

<ul>
  <li>Depth Attacks : Giving attackers deeper information about your plaintext or key
    <ul>
      <li>例如之前的one-time pad ，當key重複使用時，攻擊者可以得知P1 ⊕ P2</li>
    </ul>

    <p><img src="https://king4sam.github.io/images/studynotes/depthattack.png" /></p>
  </li>
  <li>Replay Attacks:
    <ul>
      <li>當攻擊者監聽到一個Ciphers，傳送給對應的人，一樣可以得到正確的回覆</li>
    </ul>

    <p><img src="https://king4sam.github.io/images/studynotes/replyattack.png" /></p>
  </li>
</ul>

<h2 id="using-a-nonceone-time-use-random-bytes">Using a Nonce(one-time use random bytes)</h2>

<ul>
  <li>
    <p>Countering Depth Attacks :
  當key重複使用時，還是可以因為nonce不同，而加密成不同的cipher</p>
  </li>
  <li>
    <p>Countering Replay Attacks :
  當攻擊者監聽到一個Ciphers，想要重送時，會因為Nonce不同，而被拒絕。</p>
  </li>
</ul>

<hr />

<h1 id="hashing">Hashing</h1>

<ul>
  <li>No key from the user (built-in key)</li>
  <li>One-way function only (cannot reverse/decrypt)</li>
  <li>Compresses data to fixed length (e.g., 128-bits)</li>
  <li>Collisions exist, but should be extremely rare</li>
</ul>

<h2 id="non-cryptographic-hashing">Non-cryptographic Hashing</h2>

<ul>
  <li>Cyclic Redundancy Check (CRC)
    <ul>
      <li>👍 Data Lookup</li>
      <li>👎 Data integrity</li>
    </ul>

    <p><strong>pro</strong></p>

    <ul>
      <li>simple to perform in hardware</li>
      <li>can catch common, unintentional errors</li>
    </ul>

    <p><strong>cons</strong></p>

    <ul>
      <li>cannot catch intentional manipulation</li>
      <li>easy to revers</li>
      <li>crc(x⊕y⊕z) = crc(x) ⊕ crc(y) ⊕ crc(z)
well-known design flaws of the Wired Equivalent Privacy (WEP) protocol</li>
    </ul>
  </li>
</ul>

<h2 id="cryptographic-hashing">Cryptographic Hashing</h2>
<ul>
  <li>Sha1 sha2</li>
  <li>md5</li>
  <li>…</li>
</ul>

<h2 id="data-integrity-mac-blocksmessage-authentication-code">Data Integrity: MAC blocks(Message Authentication Code)</h2>
<ul>
  <li>protects both a message’s data integrity as well as its authenticity, by allowing verifiers to detect any changes to the message content.</li>
  <li>在解密前先驗證資料來源及正確性(有沒有被變更)</li>
  <li>沒有先驗證就解密的話，攻擊者能從更改後的cipher跟plaintext中得到額外的訊息</li>
</ul>

<h3 id="approaches-to-authenticated-encryption">Approaches to Authenticated Encryption</h3>

<ol>
  <li>MAC-and-Encrypt
    <ul>
      <li>encrypy the plaintextthen calculate MAC on plaintext</li>
    </ul>
  </li>
  <li>MAC-then-Encrypt (MtE)
    <ul>
      <li>calculate MAC on plaintext and encrypt plaintext + MAC</li>
      <li>vulnerable to Decryption Oracle Attack</li>
      <li>∵ you have to perform decryption before Authenticated</li>
    </ul>
  </li>
  <li>Encrypt-then-MAC
    <ul>
      <li>encrypy the plaintext then calculate MAC on cipher</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="coding-time-">Coding time ~</h1>

<p>So many things to care about</p>

<ul>
  <li>which algorithm to apply(must be not broken yet)</li>
  <li>implements a algorithm wihout making mistake</li>
  <li>generate different keys</li>
  <li>use nonce</li>
  <li>Authenticated Encryption order</li>
</ul>

<p><img src="https://king4sam.github.io/images/fun/Jackie-chan-meme.jpg" /></p>

<h2 id="developers-should-know-about-cryptography"><strong><em>Developers should know about cryptography!</em></strong></h2>

<h2 id="but-only-cryptographers-should-write-ciphers"><strong><em>But only cryptographers should write ciphers!</em></strong></h2>

<h2 id="nacl">NaCl</h2>

<ul>
  <li>NaCl : a new easy-to-use highspeed software library for network communication, encryption, decryption, signatures, etc.</li>
</ul>

<p>Implemented in C</p>

<ul>
  <li>libSodium :  portable, cross-compilable, installable, packageable fork of NaCl</li>
</ul>

<p>Implemented in C</p>

<ul>
  <li>RbNaCl : Ruby binding to the Networking and Cryptography (NaCl) library</li>
</ul>

<p>Implemented in Ruby, but you have to install libSodium yourself</p>

<ul>
  <li>rbnacl-libsodium : packages the libsodium library as a Ruby Gem</li>
</ul>

<p>Implemented in Ruby, the only thing to do is
<code>gem install rbnacl-libsodium</code></p>

<p><a href="https://github.com/cryptosphere/rbnacl/wiki">Document of RbNaCl</a></p>

<p>灑花(<em>￣▽￣)/‧☆</em>”’ *-.,<em>,.-*’`“*-.,</em>☆</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS Week4]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/25/ss-week4/"/>
    <updated>2017-03-25T23:42:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/25/ss-week4</id>
    <content type="html"><![CDATA[<h1 id="cryptography-begining">Cryptography Begining</h1>

<!--more-->

<h2 id="symmetric-key-cryptography">Symmetric Key Cryptography</h2>

<ul>
  <li>use the same key to encrypt and decrypt</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/samekey.png" /></p>

<h2 id="confusion-and-diffusion-of-information">Confusion and Diffusion of Information</h2>

<ul>
  <li>
    <p>Confusion : key 改變一個bit，cipher改變的程度</p>
  </li>
  <li>
    <p>Diffusion : plaintext 改變1個bit，cipher 改變的程度</p>
  </li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/condiff.png" /></p>

<h2 id="what-makes-a-cipher-secure-">What makes a cipher “secure” ?</h2>

<ul>
  <li>
    <p>There are no shortcut attacks. Exhaustive key search required.</p>
  </li>
  <li>
    <p>It(the cryptography system) must not be required to be secret, and it must be able to fall into the hands of the enemy without inconvenience.
<em>(Kerckhoffs Principle)</em></p>
  </li>
</ul>

<h2 id="sk-cryptography">SK-Cryptography</h2>

<p><strong>1. Caeser Cipher</strong></p>

<p>shift each char by n</p>

<p><img src="https://king4sam.github.io/images/studynotes/caeser.png" />
<strong>2. Permutation Cipher</strong></p>

<p>把原文的char一組做順序上的掉換</p>

<p><img src="https://king4sam.github.io/images/studynotes/permutation.png" /></p>

<p>破解 : Frequency attack<br />
<strong>3. Codebook Cipher</strong></p>

<p>建表查表XDD</p>

<p><img src="https://king4sam.github.io/images/studynotes/codebook.png" />
<strong>4. Double Transposition Cipher</strong></p>

<p><img src="https://king4sam.github.io/images/studynotes/dtrans.png" />
<strong>5. One-time Pad Cipher</strong></p>

<p>Encrypt : P ⊕ K = C</p>

<p>Decrypt : C ⊕ K = P</p>

<p>Note : when reusing the same key gives attackers additional information</p>

<p>∵ C1 ⊕ C2 = P1 ⊕ K ⊕ P2 ⊕ K = P1 ⊕ P2</p>

<p>當攻擊者得知你任一個plaintext，就能解出所有plaintext</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS Week6]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/24/ss-week6/"/>
    <updated>2017-03-24T14:16:54+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/24/ss-week6</id>
    <content type="html"><![CDATA[<h1 id="public-key-cryptography">Public Key Cryptography</h1>

<!--more-->

<p>之前所討論的symmetric cryptography最終都有一個無法解決的問題:
如何交換key</p>

<p>大概只能打扮成
<br />
<img src="https://king4sam.github.io/images/fun/heisenberg.jpg" height="200px" width="200px" /></p>

<p>然後到咖啡店
<br />
<img src="https://king4sam.github.io/images/fun/behind_newspaper.jpg" /></p>

<p>跟對方面交XDD</p>

<p>因為加解密都用同一把key，所以key沒有辦法透過公開網路交換</p>

<hr />

<h2 id="what-is-public-key-pk-cryptography">What is Public-Key (PK) Cryptography</h2>
<p>則是一個是私人金鑰，另一個則是公開金鑰</p>

<p>公開金鑰可以再公開網路中傳輪</p>

<p>私有金鑰則自己保管</p>

<p>主要有兩種用途</p>

<ul>
  <li>加密資訊</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/secure.png" /></p>

<ul>
  <li>數位簽章(驗證來源是否正確)</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/signing.png" /></p>

<p>如果要同時加密資訊並驗證來源</p>

<p><img src="https://king4sam.github.io/images/studynotes/confidentiality_non-repu.png" /></p>

<p><strong>NOTE</strong>: Does the order matter?</p>

<p><strong>Sure!!</strong></p>

<p>如果先用對方public key加密，再用自己private 簽名</p>

<p>對方收到後先驗證來源後，只能保證加密後的資料是你的</p>

<p>但plain text來源無法驗證</p>

<hr />

<h2 id="graphic-pk-cryptography-example">Graphic PK cryptography example</h2>

<p>Ice cream vandor problem</p>

<p><img src="https://king4sam.github.io/images/studynotes/icecreamvendor.png" /></p>

<p>Q:</p>

<ul>
  <li>
    <p>What is the minimum number of vans we need?</p>
  </li>
  <li>
    <p>At which intersections would we base our vans?</p>
  </li>
</ul>

<p>This problem is hard to solve:</p>

<p><em>O(n choose k) = O(n!/k!(n-k)!)</em></p>

<p>However, this solution is easy to check:</p>

<p><em>O(n)</em></p>

<h3 id="encrypt">Encrypt</h3>

<p><img src="https://king4sam.github.io/images/studynotes/pkencry.png" /></p>

<h3 id="decrypt">Decrypt</h3>

<p><img src="https://king4sam.github.io/images/studynotes/pkdecry.png" /></p>

<hr />

<h2 id="real-world-pk-crypt-algorithm">real-world PK crypt algorithm</h2>

<ol>
  <li>knapsack problem</li>
</ol>

<ul>
  <li>it has been broken 😰</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/knapsackkeygen.png" /></p>

<p><img src="https://king4sam.github.io/images/studynotes/knapsackencry.png" /></p>

<p><img src="https://king4sam.github.io/images/studynotes/knapsackdecry.png" /></p>

<ol>
  <li>RSA algorithm</li>
</ol>

<p><img src="https://king4sam.github.io/images/studynotes/rsakeygen.png" /></p>

<p><img src="https://king4sam.github.io/images/studynotes/rsaencry.png" /></p>

<p><img src="https://king4sam.github.io/images/studynotes/rsadecry.png" /></p>

<hr />

<h2 id="performance">Performance</h2>

<p>那既然有了 PK , 那我們還需要symmetric cryptography幹麻?</p>

<p>大家可以安全的交換隱密資訊了💪💪💪</p>

<p>What a wonderful world ~~</p>

<p>.</p>

<p>.</p>

<p>.</p>

<p>但事實是</p>

<p>非對稱的加密非常~慢</p>

<p><img src="https://king4sam.github.io/images/studynotes/aesrsabench.png" /></p>

<p><a href="https://github.com/ISS-Security/demo_crypto/blob/master/sk_vs_pk_bench.rb">benchmark</a></p>

<p>於是美好世界</p>

<p><img src="https://media.giphy.com/media/ZNKzkUzkRx75C/giphy.gif" /></p>

<hr />

<h2 id="in-practice">In practice</h2>

<p>當然不是這樣世界就毀了</p>

<p>現實中將對稱跟非對稱一起用</p>

<p>用對稱加密資訊，再用非對稱加密key，這樣資訊跟key都可以在網路上傳輸啦~</p>

<p>同時又兼顧效能</p>

<p>whole picture
<img src="https://king4sam.github.io/images/studynotes/pkplussk.png" /></p>

<hr />

<h2 id="coding-time">Coding Time~</h2>

<ul>
  <li>
    <p>騙你的，只要用library就好</p>
  </li>
  <li>
    <p>rbnacl都做完所有該做的事了</p>
  </li>
</ul>

<figure class="code"><figcaption><span>rbnacl-pk-simple_box</span><a href="https://github.com/ISS-Security/demo_crypto/blob/master/rbnacl/rbnacl-pk-simple_box.rb">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;rbnacl/libsodium&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># KEY CREATION</span>
</span><span class="line"><span class="n">personA_private_key</span> <span class="o">=</span> <span class="no">RbNaCl</span><span class="o">::</span><span class="no">PrivateKey</span><span class="o">.</span><span class="n">generate</span>
</span><span class="line"><span class="n">personA_public_key</span>  <span class="o">=</span> <span class="n">personA_private_key</span><span class="o">.</span><span class="n">public_key</span>
</span><span class="line">
</span><span class="line"><span class="n">personB_private_key</span> <span class="o">=</span> <span class="no">RbNaCl</span><span class="o">::</span><span class="no">PrivateKey</span><span class="o">.</span><span class="n">generate</span>
</span><span class="line"><span class="n">personB_public_key</span>  <span class="o">=</span> <span class="n">personB_private_key</span><span class="o">.</span><span class="n">public_key</span>
</span><span class="line">
</span><span class="line"><span class="c1"># KEY EXCHANGE</span>
</span><span class="line"><span class="n">personA_box</span> <span class="o">=</span> <span class="no">RbNaCl</span><span class="o">::</span><span class="no">SimpleBox</span><span class="o">.</span><span class="n">from_keypair</span><span class="p">(</span>
</span><span class="line">  <span class="n">personB_public_key</span><span class="p">,</span>
</span><span class="line">  <span class="n">personA_private_key</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">personB_box</span> <span class="o">=</span> <span class="no">RbNaCl</span><span class="o">::</span><span class="no">SimpleBox</span><span class="o">.</span><span class="n">from_keypair</span><span class="p">(</span>
</span><span class="line">  <span class="n">personA_public_key</span><span class="p">,</span>
</span><span class="line">  <span class="n">personB_private_key</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># SENDING</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
</span><span class="line"><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">personA_box</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># RECEIVING</span>
</span><span class="line"><span class="n">plaintext</span> <span class="o">=</span> <span class="n">personB_box</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<p>最近會儘快把前幾週的上課筆記給補起來👻👻👻</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Branching Tutorial]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/23/git-branching-tutorial/"/>
    <updated>2017-03-23T15:17:35+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/23/git-branching-tutorial</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="git-reset-vs-git-revert">git reset vs git revert</h1>

<ul>
  <li>reset : rewriting the commit history. DON’T use it on pushed branches</li>
  <li>revert : creat a new commit, but it reverse changes.</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/gitreset.png" /></p>

<p><img src="https://king4sam.github.io/images/studynotes/gitrevert.png" /></p>

<h1 id="git-cherry-pick">git cherry-pick</h1>

<ul>
  <li>you would like to copy a series of commits below your current location (HEAD).</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// master/HEAD is at C5
</span><span class="line">// pick C2 and C4 , add them to master
</span><span class="line">git cherry-pick C2 C4</span></code></pre></td></tr></table></div></figure>

<p><img src="https://king4sam.github.io/images/studynotes/cherrypick.png" /></p>

<ul>
  <li>useage</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/debug.png" /></p>

<h1 id="git-describe">git describe</h1>

<ul>
  <li>Describe a commit using the most recent tag reachable from it</li>
</ul>

<h1 id="mixed">mixed</h1>

<h2 id="situation">situation</h2>

<p>I want to do a slight modify on newImage, then move master to C3</p>

<ul>
  <li>starting</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/situation1_b.png" /></p>

<ul>
  <li>goal</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/situation1_a.png" /></p>

<ul>
  <li>sol1</li>
</ul>

<ol>
  <li>
    <p>re-order the commits (rebase -i)</p>
  </li>
  <li>
    <p>commit –amend to make the slight modification on newImage</p>
  </li>
  <li>
    <p>re-order the commits back(git rebase -i)</p>
  </li>
  <li>
    <p>move master(git branch -f master <target>)</target></p>
  </li>
</ol>

<ul>
  <li>sol2</li>
</ul>

<ol>
  <li>
    <p>git cherry-pick C2</p>
  </li>
  <li>
    <p>commit –amend to make the slight modification on newImage</p>
  </li>
  <li>
    <p>git cherry-pick C3</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitimmersion Notes]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/20/gitimmersion/"/>
    <updated>2017-03-20T14:34:51+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/20/gitimmersion</id>
    <content type="html"><![CDATA[<p>之前用git時有些指令常常忘記，還來跳出去查一下
趁這次SS的機會，把常忘記的做個筆記</p>

<!--more-->

<hr />

<h1 id="git-command-alias">git command alias</h1>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim ~/.gitconfig
</span><span class="line">/
</span><span class="line">[alias]
</span><span class="line">  co = checkout
</span><span class="line">  ci = commit
</span><span class="line">  st = status
</span><span class="line">  br = branch
</span><span class="line">  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
</span><span class="line">  type = cat-file -t
</span><span class="line">  dump = cat-file -p
</span><span class="line"> */</span></code></pre></td></tr></table></div></figure>

<h1 id="some-useful-pretty-log-config">some useful pretty log config</h1>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git log --pretty=oneline --max-count=2
</span><span class="line">git log --pretty=oneline --since='5 minutes ago'
</span><span class="line">git log --pretty=oneline --until='5 minutes ago'
</span><span class="line">git log --pretty=oneline --author=&lt;your name&gt;
</span><span class="line">git log --pretty=oneline --all
</span><span class="line">git log --all --pretty=format:'%h %cd %s (%an)' --since='7 days ago'
</span><span class="line">git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short</span></code></pre></td></tr></table></div></figure>

<h1 id="tag">tag</h1>

<p>git tag -d <tag></tag></p>

<h1 id="recover-modified-files">recover modified files</h1>

<ul>
  <li>before staging</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">checkout &lt;file&gt;</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>before commit</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git reset HEAD file //unstage the change.
</span><span class="line">git checkout file //</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>after commit</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- git revert HEAD // creating a new commit that reverses the unwanted changes.
</span><span class="line">- git reset --hard &lt;hash&gt;</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>quick fix on last commit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git commit --amend</span></code></pre></td></tr></table></div></figure>

<p>They(bad commits) are still in the repository. It’s just that they are no longer listed in the master branch. If we hadn’t tagged them, they would still be in the repository, but there would be no way to reference them other than using their hash names.</p>

<ul>
  <li>after push</li>
</ul>

<p><strong>DON’T DO IT</strong></p>

<h1 id="moverm-file">move/rm file</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git mv file dir
</span><span class="line">/* equals
</span><span class="line">mv &lt;file&gt; &lt;dir&gt;
</span><span class="line">git add &lt;dir&gt; &lt;file&gt;
</span><span class="line">git rm &lt;file&gt;
</span><span class="line">*/</span></code></pre></td></tr></table></div></figure>

<h1 id="explore-git-internal">Explore git internal</h1>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// in .git
</span><span class="line">git cat-file -t &lt;hash&gt;</span></code></pre></td></tr></table></div></figure>

<h1 id="merge-vs-rebase">merge vs rebase</h1>
<p>Don’t use rebase …</p>

<ul>
  <li>If the branch is public and shared with others. Rewriting publicly shared branches will tend to screw up other members of the team.</li>
  <li>When the exact history of the commit branch is important (since rebase rewrites the commit history).</li>
</ul>

<h1 id="branch">branch</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// show all branch
</span><span class="line">git branch -a</span></code></pre></td></tr></table></div></figure>

<h1 id="add-a-local-branch-that-tracks-a-remote-branch">Add a local branch that tracks a remote branch.</h1>

<ul>
  <li>跟蹤分支是一種和某個遠端分支有直接聯繫的本地分支。</li>
  <li>在跟蹤分支裡輸入 git push，Git 會自行推斷應該向哪個伺服器的哪個分支推送資料。</li>
  <li>同樣，在這些分支裡運行 git pull 會獲取所有遠端索引，並把它們的資料都合併到本地分支中來</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git branch --track greet origin/greet</span></code></pre></td></tr></table></div></figure>

<h1 id="create-a-bare-repository">Create a bare repository.</h1>
<ul>
  <li>a git repo withoud working directory</li>
  <li>It is usually used for sharing.</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ..
</span><span class="line">git clone --bare hello hello.git
</span><span class="line">ls hello.git</span></code></pre></td></tr></table></div></figure>

<h1 id="keeping-a-forked-repo-updated">Keeping a forked repo updated</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//add remote repo
</span><span class="line">git remote add upstream &lt;gitrepo&gt;
</span><span class="line">
</span><span class="line">// at master branch
</span><span class="line">git checkout master
</span><span class="line">git fetch upstream
</span><span class="line">git rebase upstream/master
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://gitimmersion.com">Refernce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-9-73 ~ 9-80 Let's Build a Framework/library]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library/"/>
    <updated>2017-02-25T01:04:51+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library</id>
    <content type="html"><![CDATA[<h1 id="requirements">9-73 Requirements</h1>

<ul>
  <li>Greeter</li>
  <li>input : firstname lastname and optional language</li>
  <li>output : formal and informal greeting sentence</li>
  <li>language support English and Spanish</li>
  <li>reusable</li>
  <li>just G$() to call (no ‘new’)</li>
  <li>support jQuery(give selector, add greeting sentence to the selected element)</li>
</ul>

<!--more-->

<figure class="code"><figcaption><span>Greeter.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="nx">$</span><span class="p">){</span>
</span><span class="line">  <span class="c1">// trick , avoid the problem caused by other lib that doesn&#39;t end with semicolon</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// trick to use our lib without new</span>
</span><span class="line">  <span class="c1">// function declare, it is not actually run</span>
</span><span class="line">  <span class="c1">// so we can set Greeter.init later</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">Greeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span><span class="nx">lastName</span><span class="p">,</span><span class="nx">language</span><span class="p">){</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">firsname</span><span class="p">,</span><span class="nx">lastname</span><span class="p">,</span><span class="nx">language</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// setup prototype of greeter</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">fullName</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">validate</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">supportedLangs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;Invalid language&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">greeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">greetings</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">formalgreeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">formalgreetings</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">greet</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">formal</span><span class="p">){</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">msg</span> <span class="p">;</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">formal</span><span class="p">){</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="nx">formalgreeting</span><span class="p">();</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">else</span><span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="nx">greeting</span><span class="p">();</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">log</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">logMessages</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; : &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">());</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">setLang</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lang</span><span class="p">){</span>
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// support jQuery</span>
</span><span class="line">    <span class="nx">HTMLGreeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">formal</span><span class="p">){</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;jQuery isnot loaded&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">selector</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;Missing jQuery selector&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">      <span class="k">else</span><span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">()</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// available in init function because of closeure</span>
</span><span class="line">  <span class="c1">// but these var can&#39;t be access from global</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">supportedLangs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;en&#39;</span><span class="p">,</span><span class="s1">&#39;tw&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">greetings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;哈囉&#39;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">formalgreetings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Greetings&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;你好&#39;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">logMessages</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Logged in&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;登入&#39;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// real constructor</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span><span class="nx">lastName</span><span class="p">,</span><span class="nx">language</span><span class="p">){</span>
</span><span class="line">    <span class="c1">// safe this</span>
</span><span class="line">    <span class="c1">// point to the object created by new ()init</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// setting default value</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span> <span class="o">||</span> <span class="s1">&#39;DefaultFirstname&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span> <span class="o">||</span> <span class="s1">&#39;DefaultLastname&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">language</span> <span class="o">||</span> <span class="s1">&#39;en&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">self</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//setup prototype chain of the object created by new init()</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Greeter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//expose greeter to the world</span>
</span><span class="line">  <span class="nx">global</span><span class="p">.</span><span class="nx">Greeter</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nx">G$</span> <span class="o">=</span> <span class="nx">Greeter</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}(</span><span class="nb">window</span><span class="p">,</span><span class="nx">jQuery</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-8-69 ~ 8-72 Deep Dive Into jQuery]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery/"/>
    <updated>2017-02-20T16:39:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="jquert-part12">8-70 8-71 jQuert Part1、2</h1>

<figure class="code"><figcaption><span>jQuery Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// IIFE</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="nx">factory</span><span class="p">){</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// invoked factory</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">global</span><span class="p">);</span>
</span><span class="line"><span class="p">}(</span><span class="nb">window</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">noglobal</span><span class="p">){</span>
</span><span class="line">  <span class="nx">version</span> <span class="o">=</span> <span class="s2">&quot;1.11.2&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Define a local copy of jQuery</span>
</span><span class="line">  <span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// nickname for prototype</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Merge the contents of two or more objects together into the first object.</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// jQurry habe makeArray property which is a function</span>
</span><span class="line">    <span class="nx">makeArray</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">arr</span><span class="p">,</span> <span class="nx">results</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="nx">arr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="nx">isArraylike</span><span class="p">(</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">jQuery</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span> <span class="nx">ret</span><span class="p">,</span>
</span><span class="line">            <span class="k">typeof</span> <span class="nx">arr</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">?</span>
</span><span class="line">            <span class="p">[</span> <span class="nx">arr</span> <span class="p">]</span> <span class="o">:</span> <span class="nx">arr</span>
</span><span class="line">          <span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">push</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">arr</span> <span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//use extend to add properties on jQuery</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">({...});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Sizzle CSS Selector Engine</span>
</span><span class="line">  <span class="c1">// another IIFE inside IIFE</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">Sizzle</span> <span class="o">=</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">){});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// real init funciton</span>
</span><span class="line">  <span class="nx">init</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="c1">// this point to the empty object, created by calling new function</span>
</span><span class="line">    <span class="c1">// makeArray still return this</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="k">this</span> <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// set up the new object&#39;s prototype ctreated by new</span>
</span><span class="line">  <span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//window from line 8</span>
</span><span class="line">  <span class="kd">var</span>
</span><span class="line">  <span class="c1">// Map over jQuery in case of overwrite</span>
</span><span class="line">  <span class="nx">_jQuery</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Map over the $ in case of overwrite</span>
</span><span class="line">  <span class="nx">_$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Expose jQuery and $ identifiers</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">noGlobal</span> <span class="o">===</span> <span class="nx">strundefined</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h1 id="jquert-part3">8-73 jQuert Part3</h1>

<h2 id="bigword-alert--method-chaining">bigword alert : Method chaining</h2>
<ul>
  <li>calling one method after another, and each method affects the parent object.</li>
  <li>obj.method1().method2()</li>
</ul>

<h2 id="how-to-implements--method-chain">how to implements  method chain</h2>
<ul>
  <li>functions return this</li>
</ul>

<figure class="code"><figcaption><span>jquery addClass function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">addClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">classes</span><span class="p">,</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">cur</span><span class="p">,</span> <span class="nx">clazz</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">finalValue</span><span class="p">,</span>
</span><span class="line">      <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">      <span class="nx">len</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class="line">      <span class="nx">proceed</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span> <span class="nx">j</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">jQuery</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">className</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="nx">proceed</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="c1">// The disjunction here is for better compressibility (see removeClass)</span>
</span><span class="line">      <span class="nx">classes</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span> <span class="p">).</span><span class="nx">match</span><span class="p">(</span> <span class="nx">rnotwhite</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line">      <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">elem</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span> <span class="nx">i</span> <span class="p">];</span>
</span><span class="line">        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">?</span>
</span><span class="line">          <span class="p">(</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="p">).</span><span class="nx">replace</span><span class="p">(</span> <span class="nx">rclass</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="p">)</span> <span class="o">:</span>
</span><span class="line">          <span class="s2">&quot; &quot;</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="nx">cur</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">          <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="nx">clazz</span> <span class="o">=</span> <span class="nx">classes</span><span class="p">[</span><span class="nx">j</span><span class="o">++</span><span class="p">])</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">clazz</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">              <span class="nx">cur</span> <span class="o">+=</span> <span class="nx">clazz</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">
</span><span class="line">          <span class="c1">// only assign if different to avoid unneeded rendering.</span>
</span><span class="line">          <span class="nx">finalValue</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span> <span class="nx">cur</span> <span class="p">);</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">!==</span> <span class="nx">finalValue</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">finalValue</span><span class="p">;</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-7-65 ~ 7-68 Odds and Ends]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends/"/>
    <updated>2017-02-20T15:29:15+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="initialization">7-65 Initialization</h1>

<ul>
  <li>use literal notaion to initialization</li>
  <li>convenient for testing</li>
  <li>js engine will check syntax for you</li>
</ul>

<figure class="code"><figcaption><span>simple initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">address</span> <span class="o">:</span> <span class="p">[</span>
</span><span class="line">      <span class="s1">&#39;111 Main St.&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;others&#39;</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">greet</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="s1">&#39;Hi &#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
<hr />

<h1 id="typeof-instanceof">7-66 typeof instanceof</h1>

<ul>
  <li>
    <p>typeof : return the type name in String</p>
  </li>
  <li>
    <p>some unexpected result : [], undefined, null</p>
  </li>
  <li>
    <p>instanceof : find in deeper prototype chain, check if the type in the chain</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">);</span> <span class="c1">// weird!</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span> <span class="c1">// better!</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// makes sense</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// a bug since, like, forever...</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">z</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h1 id="strict-mode">7-67 Strict Mode</h1>

<ul>
  <li>optional</li>
  <li>must be in the top of file or top of the function</li>
  <li>not every js engine implement strict mode in the same way</li>
</ul>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">strict mode reference</a></p>

<ul>
  <li>可能問題
當多個js files合併時(produciton常用)，最開始的js file若使用了strict mode，則後面的files都會受到影響
不能保證其它lib都遵守strict mode</li>
</ul>

<figure class="code"><figcaption><span>one circumstance that strict mode helps</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">//&#39;use strict&#39;;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">logNewPerson</span><span class="p">(){</span>
</span><span class="line">  <span class="c1">//&#39;use strict&#39;;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">person2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">persom2</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">persom2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">persom</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">persom</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-4-33 Json and Object Literal]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb/"/>
    <updated>2017-02-12T00:51:29+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="json-and-object-literal">4-33 Json and object literal</h1>

<ul>
  <li>用xml傳送資料會有多餘且重複的字</li>
  <li>嘿~, js object literal 拿來送資料好像不錯用噢~</li>
  <li>property name “must” be quoted in JSON(In object literal, it could be quoted )</li>
  <li>JSON is technically a subset of object literal syntax
-&gt; valid json is also valid js object literal syntax</li>
  <li>JSON is so popular that js has utilities to tranfer between the two.(JSON.stringtify, JSON.parse)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-4-32 Framework Aside: Faking Namespace]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace/"/>
    <updated>2017-02-12T00:43:18+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="faking-namespace">4-32 Faking Namespace</h1>

<h2 id="bigword-alert--namespace"><strong>bigword alert : Namespace</strong></h2>
<ul>
  <li>a container for variables and functions</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hola!&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// greet collide</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">english</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">spanish</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">english</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">spanish</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hola!&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">english</span><span class="p">.</span><span class="nx">greetings</span><span class="p">.</span><span class="nx">greet</span>  <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span><span class="p">;</span> <span class="c1">// cannot creating on the fly</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">var english = {</span>
</span><span class="line"><span class="cm">  greeting : {</span>
</span><span class="line"><span class="cm">    basic : &#39;Hello!&#39;</span>
</span><span class="line"><span class="cm">  }</span>
</span><span class="line"><span class="cm">};</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-4-30 Objects and Functions]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-30-objects-and-functions/"/>
    <updated>2017-02-12T00:06:26+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-30-objects-and-functions</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="objects-and-the-dot">4-30 Objects and the DOT</h1>

<ul>
  <li>[ ] (computed member access) is a operator</li>
  <li>. (dot) is a operator too</li>
  <li>both has left-to-right asscociativity</li>
  <li>dot is recommended</li>
</ul>

<h2 id="types-of-object-properties">types of object properties</h2>

<p><img src="https://king4sam.github.io/images/studynotes/object_properties.PNG" /></p>

<figure class="code"><figcaption><span>computed member access</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;firstname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Tony&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;lastname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Alicea&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">firstNameProperty</span> <span class="o">=</span> <span class="s2">&quot;firstname&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="nx">firstNameProperty</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>dot operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;firstname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Tony&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;lastname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Alicea&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstname</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">stree</span> <span class="o">=</span> <span class="s2">&quot;111 Main St.&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="s2">&quot;New York&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s2">&quot;NY&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="object-and-object-literal">4-31 Object and object literal</h1>

<ul>
  <li>{} is NOT a operator</li>
</ul>

<figure class="code"><figcaption><span>object literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">var person {};</span>
</span><span class="line"><span class="cm">= var person = new Object();</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">Tony</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Tony&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Alicea&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">address</span> <span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">stree</span> <span class="o">:</span> <span class="s1">&#39;111 Main St.&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">city</span> <span class="o">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">state</span> <span class="o">:</span> <span class="s1">&#39;NY&#39;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">gree</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi &#39;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">firstname</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet</span><span class="p">(</span><span class="nx">Tony</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// creating object on the fly</span>
</span><span class="line"><span class="nx">greet</span><span class="p">({</span>
</span><span class="line">  <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-3-28 Default Values]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/09/jsuwp-3-28/"/>
    <updated>2017-02-09T00:03:04+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/09/jsuwp-3-28</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="default-values">3-28 Default values</h1>

<ul>
  <li>|| operator will return first one could be coerced to true or false</li>
</ul>

<figure class="code"><figcaption><span>js default value 小技巧</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet</span><span class="p">();</span> <span class="c1">// &#39;Hello undefined&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">greet2</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class="line">  <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;&lt;Your name here&gt;&#39;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet2</span><span class="p">();</span> <span class="c1">// &#39;Hello &lt;Your name here&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="framework-aside-default-value">3-29 Framework aside: Default value</h1>

<figure class="code"><figcaption><span>lib1.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">libname</span> <span class="o">=</span> <span class="s1">&#39;lib1&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>lib2.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">libname</span> <span class="o">=</span> <span class="s1">&#39;lib2&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// batter way</span>
</span><span class="line"><span class="c1">// window.libname = window.libname || &#39;lib2&#39;;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">libname</span><span class="p">);</span>
</span><span class="line"><span class="c1">//lib2</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">lib1.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">lib2.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">app.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp 3-19 ~ 3-27 Types and Javascript]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/08/jsuwp-2-19/"/>
    <updated>2017-02-08T21:34:43+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/08/jsuwp-2-19</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="types-and-javascript">3-19 Types and javascript</h1>

<h2 id="bigword-alert--dynamic-typing"><strong>bigword alert : Dynamic typing</strong></h2>
<ul>
  <li>you don’t tell the engine what type of data a variable holds</li>
  <li>it figures it out while your code is running</li>
</ul>

<h1 id="primitive-types">3-20 Primitive types</h1>

<h2 id="bigword-alert--primitive-type"><strong>bigword alert : Primitive type</strong></h2>
<ul>
  <li>a type of data that represents a single value</li>
  <li>(not a object)</li>
</ul>

<h2 id="list-of-primitive-types-in-javascript">List of primitive types in javascript</h2>

<ol>
  <li>
    <p>undefined
  lack of existence(note that you shouldn’t set avariable to this)</p>
  </li>
  <li>
    <p>null
  lack of existence(you can set a variable to this)</p>
  </li>
  <li>
    <p>boolean
  true or false</p>
  </li>
  <li>
    <p>number
  floating point number</p>
  </li>
  <li>
    <p>string
  sequence of characters</p>
  </li>
  <li>
    <p>symbol
  new feature in ES6, 略</p>
  </li>
</ol>

<h1 id="operators">3-21 Operators</h1>

<h2 id="bigword-alert--operator"><strong>bigword alert : operator</strong></h2>
<ul>
  <li>a special function that is syntactically (written) differently</li>
</ul>

<figure class="code"><figcaption><span>add operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>recall : postfix, prefix, infix</li>
</ul>

<h1 id="operator-precedence-and-associativity">3-22 Operator precedence and associativity</h1>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">operator precedence and Associativity table</a></p>

<h2 id="bigword-alert--operator-precedence"><strong>bigword alert : operator precedence</strong></h2>
<ul>
  <li>which operator function get called first</li>
  <li>higer precedence wins</li>
</ul>

<h2 id="bigword-alert--associativity"><strong>bigword alert : associativity</strong></h2>
<ul>
  <li>when function have the same precedence, what order operator function get called in</li>
  <li>left-to-right or right-to-left</li>
</ul>

<figure class="code"><figcaption><span>precedence and associativity</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line"><span class="c1">// precedence</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="c1">// associativity</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="coercion">3-24 Coercion</h1>

<h2 id="bigword-alert--coercion"><strong>bigword alert : Coercion</strong></h2>
<ul>
  <li>converting a value from one type to another</li>
</ul>

<figure class="code"><figcaption><span>Coercion</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;2&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* bunch of codes */</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="comparison-operator">3-25 Comparison operator</h1>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness">Comparsion result table</a></p>

<ul>
  <li>Recalls : associativity, operator, coercion</li>
</ul>

<figure class="code"><figcaption><span>try it out</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">3 &lt; 2 &lt; 1 //associativity</span>
</span><span class="line"><span class="cm">false &lt; 1 //coercion</span>
</span><span class="line"><span class="cm">0 &lt; 1 //operator</span>
</span><span class="line"><span class="cm">true</span>
</span><span class="line">
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="nb">Number</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="c1">// NaN</span>
</span><span class="line"><span class="nb">Number</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>weird equal operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="s1">&#39;3&#39;</span> <span class="o">==</span> <span class="mi">3</span> <span class="c1">//true</span>
</span><span class="line"><span class="kc">false</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//true</span>
</span><span class="line"><span class="kc">null</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//false, what!?</span>
</span><span class="line"><span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//true</span>
</span><span class="line"><span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>In javascript, == will do coercion</li>
  <li>Strict equality (===) is going to save your life !!</li>
  <li>99% of the time, use ===</li>
</ul>

<h1 id="existence-adn-booleans">3-27 Existence adn Booleans</h1>

<figure class="code"><figcaption><span>how coercion could be useful</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//false</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*goes internet and looks for a value*/</span>
</span><span class="line">
</span><span class="line"><span class="c1">// a is coercion to boolean</span>
</span><span class="line"><span class="c1">// if a could be 0, addtional comparsion is need</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">||</span> <span class="nx">a</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Something is there.&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-2-18 What About Asynchronous Callback?]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/04/jsuwp-2-18/"/>
    <updated>2017-02-04T00:51:44+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/04/jsuwp-2-18</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="what-about-asynchronous-callback">2-18 What about asynchronous callback?</h1>

<h2 id="bigword-alert--asynchronous">bigword alert : asynchronous</h2>
<ul>
  <li>more than one at a time</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/asynchronous.png" /></p>

<ul>
  <li>asking other elements -&gt; asynchronous</li>
  <li>inside js -&gt; synchronous</li>
</ul>

<h2 id="example--event-queue">Example : Event Queue</h2>
<ul>
  <li>js engine looks at the queue periodically only when stack is empty</li>
  <li>browser puts the event asynchronously</li>
  <li>js run the event handler line by line</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// long running function</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">waitThreeSeconds</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ms</span> <span class="o">=</span> <span class="mi">3000</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">ms</span><span class="p">){}</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;finished function&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">clickHandler</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;click event!&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// listen for the click event</span>
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nx">waitThreeSeconds</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;finished execution&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-2-14-2-16 Functions, Context Adn Variables]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-14/"/>
    <updated>2017-02-03T23:36:10+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-14</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="function-invocation-and-the-execution-stack">2-14 function invocation and the execution stack</h1>

<h2 id="bigword-alert--invocation">bigword alert : invocation</h2>
<ul>
  <li>running a function</li>
  <li>in js, using parenthesis ()</li>
</ul>

<h2 id="execution-stack">圖解 execution stack</h2>
<p><img src="https://king4sam.github.io/images/studynotes/executionstack.png" /></p>

<ul>
  <li>
    <p>每次function被執行，都會建立新的 execution context，即使是呼叫自己</p>
  </li>
  <li>
    <p>stack 最上層的context正在被執行</p>
  </li>
</ul>

<hr />

<h1 id="functions-context-adn-variables">2-15 functions, context adn variables</h1>

<h2 id="bigword-alert--variable-environment">bigword alert : variable environment</h2>
<ul>
  <li>where the variables live</li>
</ul>

<h2 id="bigword-alert--scope">bigword alert : scope</h2>
<ul>
  <li>where a variable is available in your code</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm">2</span>
</span><span class="line"><span class="cm">undefined</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="try-to-draw-a-picture-below">try to draw a picture below</h2>

<p><img src="https://king4sam.github.io/images/studynotes/myvar.png" /></p>

<hr />

<h1 id="scope-chain">2-16 Scope Chain</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm">why?</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="ans">Ans</h2>

<p><img src="https://king4sam.github.io/images/studynotes/outerenv.png" /></p>

<ul>
  <li>
    <p>如果var 不在該execution context，js engine 會到outer environment 找</p>
  </li>
  <li>
    <p>outer environment is depend on where the function sits lecically(set up in creation phase)</p>
  </li>
  <li>
    <p>note : 不是到stack下一層找</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">2</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="https://king4sam.github.io/images/studynotes/outerenv2.png" /></p>

<hr />

<h1 id="scope-es6-and-let">2-17 scope ES6 and let</h1>

<h2 id="recall-bigword-alert-scpoe">(Recall) bigword alert :scpoe</h2>
<ul>
  <li>where a variable is available in your code</li>
</ul>

<h2 id="let">let</h2>
<ul>
  <li>block scoping</li>
  <li>not allow to use the variable (access undefined) until the line ofcode is run</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-2-13 Single Thread, Synchronous Execution]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-13/"/>
    <updated>2017-02-03T21:52:58+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-13</id>
    <content type="html"><![CDATA[<!--more-->
<p># 2-13 Single thread, Synchronous execution</p>

<h2 id="bigword-alert--single-thread">bigword alert : single thread</h2>
<ul>
  <li>one command at a time</li>
  <li>under the hood of the brower, maybe not</li>
</ul>

<h2 id="bigwod-alert--synchronous">bigwod alert : synchronous</h2>
<ul>
  <li>one at a time, and in order</li>
</ul>

<h2 id="js-single-thread-synchronous">講師霸氣的說:現在先相信我，js是 single thread, synchronous</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-2-12 Code Execution]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-12/"/>
    <updated>2017-02-03T21:43:46+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-12</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="code-execution">2-12 Code execution</h1>

<h2 id="recall--two-phases-to-run-a-js-code">Recall : two phases to run a js code</h2>
<ol>
  <li>creation phase : set up global object , setup variables, outer environments …</li>
  <li>execution phase : execution the code “line by line”</li>
</ol>
]]></content>
  </entry>
  
</feed>
