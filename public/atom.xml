<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Necisam's blog]]></title>
  <link href="https://king4sam.github.io/atom.xml" rel="self"/>
  <link href="https://king4sam.github.io/"/>
  <updated>2017-03-20T21:57:50+08:00</updated>
  <id>https://king4sam.github.io/</id>
  <author>
    <name><![CDATA[Necisam]]></name>
    <email><![CDATA[king4sam990816@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitimmersion Notes]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/20/gitimmersion/"/>
    <updated>2017-03-20T14:34:51+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/20/gitimmersion</id>
    <content type="html"><![CDATA[<p>之前用git時有些指令常常忘記，還來跳出去查一下
趁這次SS的機會，把常忘記的做個筆記</p>

<!--more-->

<hr />

<h1 id="git-command-alias">git command alias</h1>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim ~/.gitconfig
</span><span class="line">/
</span><span class="line">[alias]
</span><span class="line">  co = checkout
</span><span class="line">  ci = commit
</span><span class="line">  st = status
</span><span class="line">  br = branch
</span><span class="line">  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
</span><span class="line">  type = cat-file -t
</span><span class="line">  dump = cat-file -p
</span><span class="line"> */</span></code></pre></td></tr></table></div></figure>

<h1 id="some-useful-pretty-log-config">some useful pretty log config</h1>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git log --pretty=oneline --max-count=2
</span><span class="line">git log --pretty=oneline --since='5 minutes ago'
</span><span class="line">git log --pretty=oneline --until='5 minutes ago'
</span><span class="line">git log --pretty=oneline --author=&lt;your name&gt;
</span><span class="line">git log --pretty=oneline --all
</span><span class="line">git log --all --pretty=format:'%h %cd %s (%an)' --since='7 days ago'
</span><span class="line">git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short</span></code></pre></td></tr></table></div></figure>

<h1 id="tag">tag</h1>

<p>git tag -d <tag></tag></p>

<h1 id="recover-modified-files">recover modified files</h1>

<ul>
  <li>before staging</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">checkout &lt;file&gt;</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>before commit</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git reset HEAD file //unstage the change.
</span><span class="line">git checkout file //</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>after commit</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- git revert HEAD // creating a new commit that reverses the unwanted changes.
</span><span class="line">- git reset --hard &lt;hash&gt;</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>quick fix on last commit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git commit --amend</span></code></pre></td></tr></table></div></figure>

<p>They(bad commits) are still in the repository. It’s just that they are no longer listed in the master branch. If we hadn’t tagged them, they would still be in the repository, but there would be no way to reference them other than using their hash names.</p>

<ul>
  <li>after push</li>
</ul>

<p><strong>DON’T DO IT</strong></p>

<h1 id="moverm-file">move/rm file</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git mv file dir
</span><span class="line">/* equals
</span><span class="line">mv &lt;file&gt; &lt;dir&gt;
</span><span class="line">git add &lt;dir&gt; &lt;file&gt;
</span><span class="line">git rm &lt;file&gt;
</span><span class="line">*/</span></code></pre></td></tr></table></div></figure>

<h1 id="explore-git-internal">Explore git internal</h1>
<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// in .git
</span><span class="line">git cat-file -t &lt;hash&gt;</span></code></pre></td></tr></table></div></figure>

<h1 id="merge-vs-rebase">merge vs rebase</h1>
<p>Don’t use rebase …</p>

<ul>
  <li>If the branch is public and shared with others. Rewriting publicly shared branches will tend to screw up other members of the team.</li>
  <li>When the exact history of the commit branch is important (since rebase rewrites the commit history).</li>
</ul>

<h1 id="branch">branch</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// show all branch
</span><span class="line">git branch -a</span></code></pre></td></tr></table></div></figure>

<h1 id="add-a-local-branch-that-tracks-a-remote-branch">Add a local branch that tracks a remote branch.</h1>

<ul>
  <li>跟蹤分支是一種和某個遠端分支有直接聯繫的本地分支。</li>
  <li>在跟蹤分支裡輸入 git push，Git 會自行推斷應該向哪個伺服器的哪個分支推送資料。</li>
  <li>同樣，在這些分支裡運行 git pull 會獲取所有遠端索引，並把它們的資料都合併到本地分支中來</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git branch --track greet origin/greet</span></code></pre></td></tr></table></div></figure>

<h1 id="create-a-bare-repository">Create a bare repository.</h1>
<ul>
  <li>a git repo withoud working directory</li>
  <li>It is usually used for sharing.</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ..
</span><span class="line">git clone --bare hello hello.git
</span><span class="line">ls hello.git</span></code></pre></td></tr></table></div></figure>

<h1 id="keeping-a-forked-repo-updated">Keeping a forked repo updated</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//add remote repo
</span><span class="line">git remote add upstream &lt;gitrepo&gt;
</span><span class="line">
</span><span class="line">// at master branch
</span><span class="line">git checkout master
</span><span class="line">git fetch upstream
</span><span class="line">git rebase upstream/master
</span></code></pre></td></tr></table></div></figure>

<p><a href="http://gitimmersion.com">Refernce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-9-73 ~ 9-80 Let's build a Framework/library]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library/"/>
    <updated>2017-02-25T01:04:51+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library</id>
    <content type="html"><![CDATA[<h1 id="requirements">9-73 Requirements</h1>

<ul>
  <li>Greeter</li>
  <li>input : firstname lastname and optional language</li>
  <li>output : formal and informal greeting sentence</li>
  <li>language support English and Spanish</li>
  <li>reusable</li>
  <li>just G$() to call (no ‘new’)</li>
  <li>support jQuery(give selector, add greeting sentence to the selected element)</li>
</ul>

<!--more-->

<figure class="code"><figcaption><span>Greeter.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">;(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="nx">$</span><span class="p">){</span>
</span><span class="line">  <span class="c1">// trick , avoid the problem caused by other lib that doesn&#39;t end with semicolon</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// trick to use our lib without new</span>
</span><span class="line">  <span class="c1">// function declare, it is not actually run</span>
</span><span class="line">  <span class="c1">// so we can set Greeter.init later</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">Greeter</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span><span class="nx">lastName</span><span class="p">,</span><span class="nx">language</span><span class="p">){</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">firsname</span><span class="p">,</span><span class="nx">lastname</span><span class="p">,</span><span class="nx">language</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// setup prototype of greeter</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">fullName</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">validate</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">supportedLangs</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;Invalid language&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">greeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">greetings</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">formalgreeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">formalgreetings</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">greet</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">formal</span><span class="p">){</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">msg</span> <span class="p">;</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">formal</span><span class="p">){</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="nx">formalgreeting</span><span class="p">();</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">else</span><span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="nx">greeting</span><span class="p">();</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="nx">log</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">console</span><span class="p">){</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">logMessages</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">language</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; : &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span><span class="p">());</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">setLang</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">lang</span><span class="p">){</span>
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">lang</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// support jQuery</span>
</span><span class="line">    <span class="nx">HTMLGreeting</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">,</span> <span class="nx">formal</span><span class="p">){</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;jQuery isnot loaded&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">selector</span><span class="p">){</span>
</span><span class="line">        <span class="k">throw</span> <span class="s1">&#39;Missing jQuery selector&#39;</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">      <span class="k">else</span><span class="p">{</span>
</span><span class="line">        <span class="nx">msg</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">()</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="nx">selector</span><span class="p">).</span><span class="nx">html</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// available in init function because of closeure</span>
</span><span class="line">  <span class="c1">// but these var can&#39;t be access from global</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">supportedLangs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;en&#39;</span><span class="p">,</span><span class="s1">&#39;tw&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">greetings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;哈囉&#39;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">formalgreetings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Greetings&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;你好&#39;</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">logMessages</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">en</span> <span class="o">:</span> <span class="s1">&#39;Logged in&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">tw</span> <span class="o">:</span> <span class="s1">&#39;登入&#39;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// real constructor</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">firstName</span><span class="p">,</span><span class="nx">lastName</span><span class="p">,</span><span class="nx">language</span><span class="p">){</span>
</span><span class="line">    <span class="c1">// safe this</span>
</span><span class="line">    <span class="c1">// point to the object created by new ()init</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// setting default value</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span> <span class="o">||</span> <span class="s1">&#39;DefaultFirstname&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span> <span class="o">||</span> <span class="s1">&#39;DefaultLastname&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">self</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="nx">language</span> <span class="o">||</span> <span class="s1">&#39;en&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">self</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//setup prototype chain of the object created by new init()</span>
</span><span class="line">  <span class="nx">Greeter</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Greeter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//expose greeter to the world</span>
</span><span class="line">  <span class="nx">global</span><span class="p">.</span><span class="nx">Greeter</span> <span class="o">=</span> <span class="nx">global</span><span class="p">.</span><span class="nx">G$</span> <span class="o">=</span> <span class="nx">Greeter</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}(</span><span class="nb">window</span><span class="p">,</span><span class="nx">jQuery</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-8-69 ~ 8-72 Deep dive into jQuery]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery/"/>
    <updated>2017-02-20T16:39:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="jquert-part12">8-70 8-71 jQuert Part1、2</h1>

<figure class="code"><figcaption><span>jQuery Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// IIFE</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">,</span> <span class="nx">factory</span><span class="p">){</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// invoked factory</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">global</span><span class="p">);</span>
</span><span class="line"><span class="p">}(</span><span class="nb">window</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="nx">noglobal</span><span class="p">){</span>
</span><span class="line">  <span class="nx">version</span> <span class="o">=</span> <span class="s2">&quot;1.11.2&quot;</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Define a local copy of jQuery</span>
</span><span class="line">  <span class="nx">jQuery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">);</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">  <span class="p">.</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// nickname for prototype</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span><span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//Merge the contents of two or more objects together into the first object.</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">extend</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// jQurry habe makeArray property which is a function</span>
</span><span class="line">    <span class="nx">makeArray</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">arr</span><span class="p">,</span> <span class="nx">results</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="nx">arr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="nx">isArraylike</span><span class="p">(</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">jQuery</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span> <span class="nx">ret</span><span class="p">,</span>
</span><span class="line">            <span class="k">typeof</span> <span class="nx">arr</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">?</span>
</span><span class="line">            <span class="p">[</span> <span class="nx">arr</span> <span class="p">]</span> <span class="o">:</span> <span class="nx">arr</span>
</span><span class="line">          <span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">push</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">arr</span> <span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">...</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//use extend to add properties on jQuery</span>
</span><span class="line">  <span class="nx">jQuery</span><span class="p">.</span><span class="nx">extend</span><span class="p">({...});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Sizzle CSS Selector Engine</span>
</span><span class="line">  <span class="c1">// another IIFE inside IIFE</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">Sizzle</span> <span class="o">=</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nb">window</span><span class="p">){});</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// real init funciton</span>
</span><span class="line">  <span class="nx">init</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">context</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="c1">// this point to the empty object, created by calling new function</span>
</span><span class="line">    <span class="c1">// makeArray still return this</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">makeArray</span><span class="p">(</span> <span class="nx">selector</span><span class="p">,</span> <span class="k">this</span> <span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// set up the new object&#39;s prototype ctreated by new</span>
</span><span class="line">  <span class="nx">init</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">//window from line 8</span>
</span><span class="line">  <span class="kd">var</span>
</span><span class="line">  <span class="c1">// Map over jQuery in case of overwrite</span>
</span><span class="line">  <span class="nx">_jQuery</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Map over the $ in case of overwrite</span>
</span><span class="line">  <span class="nx">_$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Expose jQuery and $ identifiers</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">noGlobal</span> <span class="o">===</span> <span class="nx">strundefined</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">jQuery</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h1 id="jquert-part3">8-73 jQuert Part3</h1>

<h2 id="bigword-alert--method-chaining">bigword alert : Method chaining</h2>
<ul>
  <li>calling one method after another, and each method affects the parent object.</li>
  <li>obj.method1().method2()</li>
</ul>

<h2 id="how-to-implements--method-chain">how to implements  method chain</h2>
<ul>
  <li>functions return this</li>
</ul>

<figure class="code"><figcaption><span>jquery addClass function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">addClass</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">classes</span><span class="p">,</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">cur</span><span class="p">,</span> <span class="nx">clazz</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">finalValue</span><span class="p">,</span>
</span><span class="line">      <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">      <span class="nx">len</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class="line">      <span class="nx">proceed</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s2">&quot;string&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">value</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span> <span class="nx">j</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">jQuery</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="nx">value</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">className</span> <span class="p">)</span> <span class="p">);</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="nx">proceed</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="c1">// The disjunction here is for better compressibility (see removeClass)</span>
</span><span class="line">      <span class="nx">classes</span> <span class="o">=</span> <span class="p">(</span> <span class="nx">value</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span> <span class="p">).</span><span class="nx">match</span><span class="p">(</span> <span class="nx">rnotwhite</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line">      <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">elem</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span> <span class="nx">i</span> <span class="p">];</span>
</span><span class="line">        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">?</span>
</span><span class="line">          <span class="p">(</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="p">).</span><span class="nx">replace</span><span class="p">(</span> <span class="nx">rclass</span><span class="p">,</span> <span class="s2">&quot; &quot;</span> <span class="p">)</span> <span class="o">:</span>
</span><span class="line">          <span class="s2">&quot; &quot;</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="nx">cur</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">          <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="nx">clazz</span> <span class="o">=</span> <span class="nx">classes</span><span class="p">[</span><span class="nx">j</span><span class="o">++</span><span class="p">])</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span> <span class="nx">cur</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">clazz</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">              <span class="nx">cur</span> <span class="o">+=</span> <span class="nx">clazz</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">
</span><span class="line">          <span class="c1">// only assign if different to avoid unneeded rendering.</span>
</span><span class="line">          <span class="nx">finalValue</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span> <span class="nx">cur</span> <span class="p">);</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">!==</span> <span class="nx">finalValue</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="nx">finalValue</span><span class="p">;</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-7-65 ~ 7-68 Odds and Ends]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends/"/>
    <updated>2017-02-20T15:29:15+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="initialization">7-65 Initialization</h1>

<ul>
  <li>use literal notaion to initialization</li>
  <li>convenient for testing</li>
  <li>js engine will check syntax for you</li>
</ul>

<figure class="code"><figcaption><span>simple initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">address</span> <span class="o">:</span> <span class="p">[</span>
</span><span class="line">      <span class="s1">&#39;111 Main St.&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;others&#39;</span>
</span><span class="line">    <span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Jane&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">greet</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">      <span class="k">return</span> <span class="s1">&#39;Hi &#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>
<hr />

<h1 id="typeof-instanceof">7-66 typeof instanceof</h1>

<ul>
  <li>
    <p>typeof : return the type name in String</p>
  </li>
  <li>
    <p>some unexpected result : [], undefined, null</p>
  </li>
  <li>
    <p>instanceof : find in deeper prototype chain, check if the type in the chain</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">);</span> <span class="c1">// weird!</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span> <span class="c1">// better!</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Person</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// makes sense</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// a bug since, like, forever...</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">z</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">z</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<hr />

<h1 id="strict-mode">7-67 Strict Mode</h1>

<ul>
  <li>optional</li>
  <li>must be in the top of file or top of the function</li>
  <li>not every js engine implement strict mode in the same way</li>
</ul>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">strict mode reference</a></p>

<ul>
  <li>可能問題
當多個js files合併時(produciton常用)，最開始的js file若使用了strict mode，則後面的files都會受到影響
不能保證其它lib都遵守strict mode</li>
</ul>

<figure class="code"><figcaption><span>one circumstance that strict mode helps</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">//&#39;use strict&#39;;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">logNewPerson</span><span class="p">(){</span>
</span><span class="line">  <span class="c1">//&#39;use strict&#39;;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">person2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">persom2</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">persom2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">persom</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">persom</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-4-34 functions are objects]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-34-functions-are-objects/"/>
    <updated>2017-02-12T22:44:58+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-34-functions-are-objects</id>
    <content type="html"><![CDATA[<h1 id="functions-are-objects">4-34 functions are objects</h1>

<!--more-->

<h2 id="bigword-alert--first-class-functions"><strong>bigword alert : first class functions</strong></h2>
<ul>
  <li>everything you can do with other types you can do with function</li>
  <li>ex: assign them to variables, pass them around, create them on the fly …</li>
  <li>js is not the only language that has first class function</li>
</ul>

<figure class="code"><figcaption><span>function can has properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">greet</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="s1">&#39;en&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">.</span><span class="nx">language</span><span class="p">);</span>
</span><span class="line"><span class="c1">// en</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="function-statement-and-function-expression">4-35 function statement and function expression</h1>

<h2 id="bigword-alert--expression"><strong>bigword alert : expression</strong></h2>
<ul>
  <li>a unit of code that results in a value</li>
  <li>statements just do the work, no return value</li>
</ul>

<figure class="code"><figcaption><span>statement and expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// function statements</span>
</span><span class="line"><span class="nx">greet</span><span class="p">();</span> <span class="c1">//runable because of hoisting</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">greet</span> <span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">anonymousGreet</span><span class="p">();</span> <span class="c1">//only variable is hoisted</span>
</span><span class="line">
</span><span class="line"><span class="c1">// function expression</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">anonymousGreet</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>create function on the fly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">();</span> <span class="c1">//invoke it</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">log</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-4-33 Json and object literal]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb/"/>
    <updated>2017-02-12T00:51:29+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="json-and-object-literal">4-33 Json and object literal</h1>

<ul>
  <li>用xml傳送資料會有多餘且重複的字</li>
  <li>嘿~, js object literal 拿來送資料好像不錯用噢~</li>
  <li>property name “must” be quoted in JSON(In object literal, it could be quoted )</li>
  <li>JSON is technically a subset of object literal syntax
-&gt; valid json is also valid js object literal syntax</li>
  <li>JSON is so popular that js has utilities to tranfer between the two.(JSON.stringtify, JSON.parse)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-4-32 Framework aside: Faking Namespace]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace/"/>
    <updated>2017-02-12T00:43:18+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="faking-namespace">4-32 Faking Namespace</h1>

<h2 id="bigword-alert--namespace"><strong>bigword alert : Namespace</strong></h2>
<ul>
  <li>a container for variables and functions</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hola!&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// greet collide</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">english</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">spanish</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">english</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">spanish</span><span class="p">.</span><span class="nx">greet</span> <span class="o">=</span> <span class="s1">&#39;Hola!&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">english</span><span class="p">.</span><span class="nx">greetings</span><span class="p">.</span><span class="nx">greet</span>  <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span><span class="p">;</span> <span class="c1">// cannot creating on the fly</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">var english = {</span>
</span><span class="line"><span class="cm">  greeting : {</span>
</span><span class="line"><span class="cm">    basic : &#39;Hello!&#39;</span>
</span><span class="line"><span class="cm">  }</span>
</span><span class="line"><span class="cm">};</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-4-30 Objects and Functions]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-30-objects-and-functions/"/>
    <updated>2017-02-12T00:06:26+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-30-objects-and-functions</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="objects-and-the-dot">4-30 Objects and the DOT</h1>

<ul>
  <li>[ ] (computed member access) is a operator</li>
  <li>. (dot) is a operator too</li>
  <li>both has left-to-right asscociativity</li>
  <li>dot is recommended</li>
</ul>

<figure class="code"><figcaption><span>computed member access</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;firstname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Tony&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;lastname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Alicea&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">firstNameProperty</span> <span class="o">=</span> <span class="s2">&quot;firstname&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="nx">firstNameProperty</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>dot operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;firstname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Tony&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">[</span><span class="s2">&quot;lastname&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;Alicea&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstname</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">stree</span> <span class="o">=</span> <span class="s2">&quot;111 Main St.&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="s2">&quot;New York&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">person</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s2">&quot;NY&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="object-and-object-literal">4-31 Object and object literal</h1>

<ul>
  <li>{} is NOT a operator</li>
</ul>

<figure class="code"><figcaption><span>object literal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">var person {};</span>
</span><span class="line"><span class="cm">= var person = new Object();</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">Tony</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Tony&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Alicea&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">address</span> <span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">stree</span> <span class="o">:</span> <span class="s1">&#39;111 Main St.&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">city</span> <span class="o">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">state</span> <span class="o">:</span> <span class="s1">&#39;NY&#39;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">gree</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hi &#39;</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">firstname</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet</span><span class="p">(</span><span class="nx">Tony</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// creating object on the fly</span>
</span><span class="line"><span class="nx">greet</span><span class="p">({</span>
</span><span class="line">  <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Mary&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Doe&#39;</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-3-28 Default values]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/09/jsuwp-3-28/"/>
    <updated>2017-02-09T00:03:04+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/09/jsuwp-3-28</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="default-values">3-28 Default values</h1>

<ul>
  <li>|| operator will return first one could be coerced to true or false</li>
</ul>

<figure class="code"><figcaption><span>js default value 小技巧</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet</span><span class="p">();</span> <span class="c1">// &#39;Hello undefined&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">greet2</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class="line">  <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;&lt;Your name here&gt;&#39;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">greet2</span><span class="p">();</span> <span class="c1">// &#39;Hello &lt;Your name here&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="framework-aside-default-value">3-29 Framework aside: Default value</h1>

<figure class="code"><figcaption><span>lib1.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">libname</span> <span class="o">=</span> <span class="s1">&#39;lib1&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>lib2.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">libname</span> <span class="o">=</span> <span class="s1">&#39;lib2&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// batter way</span>
</span><span class="line"><span class="c1">// window.libname = window.libname || &#39;lib2&#39;;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">libname</span><span class="p">);</span>
</span><span class="line"><span class="c1">//lib2</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">  <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">lib1.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">lib2.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">src =</span><span class="err"> </span><span class="s">app.js</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp 3-19 ~ 3-27 Types and javascript]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/08/jsuwp-2-19/"/>
    <updated>2017-02-08T21:34:43+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/08/jsuwp-2-19</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="types-and-javascript">3-19 Types and javascript</h1>

<h2 id="bigword-alert--dynamic-typing"><strong>bigword alert : Dynamic typing</strong></h2>
<ul>
  <li>you don’t tell the engine what type of data a variable holds</li>
  <li>it figures it out while your code is running</li>
</ul>

<h1 id="primitive-types">3-20 Primitive types</h1>

<h2 id="bigword-alert--primitive-type"><strong>bigword alert : Primitive type</strong></h2>
<ul>
  <li>a type of data that represents a single value</li>
  <li>(not a object)</li>
</ul>

<h2 id="list-of-primitive-types-in-javascript">List of primitive types in javascript</h2>

<ol>
  <li>
    <p>undefined
  lack of existence(note that you shouldn’t set avariable to this)</p>
  </li>
  <li>
    <p>null
  lack of existence(you can set a variable to this)</p>
  </li>
  <li>
    <p>boolean
  true or false</p>
  </li>
  <li>
    <p>number
  floating point number</p>
  </li>
  <li>
    <p>string
  sequence of characters</p>
  </li>
  <li>
    <p>symbol
  new feature in ES6, 略</p>
  </li>
</ol>

<h1 id="operators">3-21 Operators</h1>

<h2 id="bigword-alert--operator"><strong>bigword alert : operator</strong></h2>
<ul>
  <li>a special function that is syntactically (written) differently</li>
</ul>

<figure class="code"><figcaption><span>add operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>recall : postfix, prefix, infix</li>
</ul>

<h1 id="operator-precedence-and-associativity">3-22 Operator precedence and associativity</h1>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">operator precedence and Associativity table</a></p>

<h2 id="bigword-alert--operator-precedence"><strong>bigword alert : operator precedence</strong></h2>
<ul>
  <li>which operator function get called first</li>
  <li>higer precedence wins</li>
</ul>

<h2 id="bigword-alert--associativity"><strong>bigword alert : associativity</strong></h2>
<ul>
  <li>when function have the same precedence, what order operator function get called in</li>
  <li>left-to-right or right-to-left</li>
</ul>

<figure class="code"><figcaption><span>precedence and associativity</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line"><span class="c1">// precedence</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
</span><span class="line"><span class="c1">// associativity</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="coercion">3-24 Coercion</h1>

<h2 id="bigword-alert--coercion"><strong>bigword alert : Coercion</strong></h2>
<ul>
  <li>converting a value from one type to another</li>
</ul>

<figure class="code"><figcaption><span>Coercion</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;2&#39;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* bunch of codes */</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="comparison-operator">3-25 Comparison operator</h1>

<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness">Comparsion result table</a></p>

<ul>
  <li>Recalls : associativity, operator, coercion</li>
</ul>

<figure class="code"><figcaption><span>try it out</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">3 &lt; 2 &lt; 1 //associativity</span>
</span><span class="line"><span class="cm">false &lt; 1 //coercion</span>
</span><span class="line"><span class="cm">0 &lt; 1 //operator</span>
</span><span class="line"><span class="cm">true</span>
</span><span class="line">
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="nb">Number</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="c1">// NaN</span>
</span><span class="line"><span class="nb">Number</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="c1">// 0</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>weird equal operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="s1">&#39;3&#39;</span> <span class="o">==</span> <span class="mi">3</span> <span class="c1">//true</span>
</span><span class="line"><span class="kc">false</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//true</span>
</span><span class="line"><span class="kc">null</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//false, what!?</span>
</span><span class="line"><span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">//true</span>
</span><span class="line"><span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>In javascript, == will do coercion</li>
  <li>Strict equality (===) is going to save your life !!</li>
  <li>99% of the time, use ===</li>
</ul>

<h1 id="existence-adn-booleans">3-27 Existence adn Booleans</h1>

<figure class="code"><figcaption><span>how coercion could be useful</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class="line"><span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">//false</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*goes internet and looks for a value*/</span>
</span><span class="line">
</span><span class="line"><span class="c1">// a is coercion to boolean</span>
</span><span class="line"><span class="c1">// if a could be 0, addtional comparsion is need</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">||</span> <span class="nx">a</span> <span class="o">===</span> <span class="mi">0</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Something is there.&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-18 What about asynchronous callback?]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/04/jsuwp-2-18/"/>
    <updated>2017-02-04T00:51:44+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/04/jsuwp-2-18</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="what-about-asynchronous-callback">2-18 What about asynchronous callback?</h1>

<h2 id="bigword-alert--asynchronous">bigword alert : asynchronous</h2>
<ul>
  <li>more than one at a time</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/asynchronous.png" /></p>

<ul>
  <li>asking other elements -&gt; asynchronous</li>
  <li>inside js -&gt; synchronous</li>
</ul>

<h2 id="example--event-queue">Example : Event Queue</h2>
<ul>
  <li>js engine looks at the queue periodically only when stack is empty</li>
  <li>browser puts the event asynchronously</li>
  <li>js run the event handler line by line</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// long running function</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">waitThreeSeconds</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ms</span> <span class="o">=</span> <span class="mi">3000</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">ms</span><span class="p">){}</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;finished function&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">clickHandler</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;click event!&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// listen for the click event</span>
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nx">waitThreeSeconds</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;finished execution&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-14-2-16 functions, context adn variables]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-14/"/>
    <updated>2017-02-03T23:36:10+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-14</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="function-invocation-and-the-execution-stack">2-14 function invocation and the execution stack</h1>

<h2 id="bigword-alert--invocation">bigword alert : invocation</h2>
<ul>
  <li>running a function</li>
  <li>in js, using parenthesis ()</li>
</ul>

<h2 id="execution-stack">圖解 execution stack</h2>
<p><img src="https://king4sam.github.io/images/studynotes/executionstack.png" /></p>

<ul>
  <li>
    <p>每次function被執行，都會建立新的 execution context，即使是呼叫自己</p>
  </li>
  <li>
    <p>stack 最上層的context正在被執行</p>
  </li>
</ul>

<hr />

<h1 id="functions-context-adn-variables">2-15 functions, context adn variables</h1>

<h2 id="bigword-alert--variable-environment">bigword alert : variable environment</h2>
<ul>
  <li>where the variables live</li>
</ul>

<h2 id="bigword-alert--scope">bigword alert : scope</h2>
<ul>
  <li>where a variable is available in your code</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm">2</span>
</span><span class="line"><span class="cm">undefined</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="try-to-draw-a-picture-below">try to draw a picture below</h2>

<p><img src="https://king4sam.github.io/images/studynotes/myvar.png" /></p>

<hr />

<h1 id="scope-chain">2-16 Scope Chain</h1>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">1</span>
</span><span class="line"><span class="cm">why?</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="ans">Ans</h2>

<p><img src="https://king4sam.github.io/images/studynotes/outerenv.png" /></p>

<ul>
  <li>
    <p>如果var 不在該execution context，js engine 會到outer environment 找</p>
  </li>
  <li>
    <p>outer environment is depend on where the function sits lecically(set up in creation phase)</p>
  </li>
  <li>
    <p>note : 不是到stack下一層找</p>
  </li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myvar</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myvar</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="nx">a</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">2</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

<p><img src="https://king4sam.github.io/images/studynotes/outerenv2.png" /></p>

<hr />

<h1 id="scope-es6-and-let">2-17 scope ES6 and let</h1>

<h2 id="recall-bigword-alert-scpoe">(Recall) bigword alert :scpoe</h2>
<ul>
  <li>where a variable is available in your code</li>
</ul>

<h2 id="let">let</h2>
<ul>
  <li>block scoping</li>
  <li>not allow to use the variable (access undefined) until the line ofcode is run</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-13 single thread, synchronous execution]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-13/"/>
    <updated>2017-02-03T21:52:58+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-13</id>
    <content type="html"><![CDATA[<!--more-->
<p># 2-13 Single thread, Synchronous execution</p>

<h2 id="bigword-alert--single-thread">bigword alert : single thread</h2>
<ul>
  <li>one command at a time</li>
  <li>under the hood of the brower, maybe not</li>
</ul>

<h2 id="bigwod-alert--synchronous">bigwod alert : synchronous</h2>
<ul>
  <li>one at a time, and in order</li>
</ul>

<h2 id="js-single-thread-synchronous">講師霸氣的說:現在先相信我，js是 single thread, synchronous</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-12 code execution]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-12/"/>
    <updated>2017-02-03T21:43:46+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-12</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="code-execution">2-12 Code execution</h1>

<h2 id="recall--two-phases-to-run-a-js-code">Recall : two phases to run a js code</h2>
<ol>
  <li>creation phase : set up global object , setup variables, outer environments …</li>
  <li>execution phase : execution the code “line by line”</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-11 undefined]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/03/jsuwp-2-11/"/>
    <updated>2017-02-03T21:28:09+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/03/jsuwp-2-11</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="undefined">2-11 Undefined</h1>

<h2 id="undefinedundefinedjs-engine-debug">千萬不要自己將變數的值設成undefined，以保證undefined都是js engine 所設的，方便debug</h2>

<h2 id="notset--">作者覺得叫notset 比較合適 😤</h2>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//Uncaught ReferenceError: a is not defined</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>a does not exist in memory</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">//undefined</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>a exists in memory, but is set to a special value - undefined</li>
</ul>

<figure class="code"><figcaption><span>testing undefined value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;a is not defined&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">else</span><span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;a is definded&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-10 Creation and hoisting]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/02/jsuwp-2-10/"/>
    <updated>2017-02-02T00:11:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/02/jsuwp-2-10</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="creation-and-hoisting">2-10 Creation and hoisting</h1>

<ul>
  <li>hoisting : before js code is run line by line, js engine set memory space for the variables</li>
  <li>all variables is initialized to undefined in js</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/creationphase.png" /></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;Bello&#39;</span><span class="p">;</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">b</span> <span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;called b&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">called b</span>
</span><span class="line"><span class="cm">undefined</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">b</span><span class="p">();</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">b</span> <span class="p">(){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;called b&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">called b</span>
</span><span class="line"><span class="cm">Error!!</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-9 Global environment and Global object]]></title>
    <link href="https://king4sam.github.io/blog/2017/01/20/jsuwp-2-8/"/>
    <updated>2017-01-20T11:45:46+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/01/20/jsuwp-2-8</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="global-environment-and-global-object">2-9 Global environment and Global object</h1>

<ul>
  <li>Global objects(Ex: window, on browser) and “this” is created by javascript engine</li>
  <li>At globle level, ‘this’ is equal to ‘window’ inside browser</li>
  <li>the global (values and functions) are attached to global objects</li>
</ul>

<p><img src="https://king4sam.github.io/images/studynotes/Globalcontext_overview.png" /></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">b</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){};</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-7 Name/Value pairs and Objects]]></title>
    <link href="https://king4sam.github.io/blog/2017/01/20/jsuwp-2-7/"/>
    <updated>2017-01-20T11:39:32+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/01/20/jsuwp-2-7</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="namevalue-pairs-and-objects">2-7 Name/Value pairs and Objects</h1>

<h2 id="bigword-alert--namevalue-pair">bigword alert : Name/Value pair</h2>
<ul>
  <li>a name which maps to an unique value</li>
  <li>the name may be defined more than once, but only can have one value in any given context</li>
  <li>value could be another key/value pari</li>
</ul>

<h2 id="bigword-alert--objectin-javascript">bigword alert : Object(In javascript)</h2>
<ul>
  <li>a collection of Name/Value pairs</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jsuwp-2-6 Syntax Parser, Execution Contex and Lexical Environment]]></title>
    <link href="https://king4sam.github.io/blog/2017/01/20/jsuwp-2-6/"/>
    <updated>2017-01-20T11:28:05+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/01/20/jsuwp-2-6</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="syntax-parser-execution-contex-and-lexical-environment">2-6 Syntax Parser, Execution Contex and Lexical Environment</h1>

<h2 id="bigword-alert--syntax-parser">bigword alert : Syntax Parser</h2>
<ul>
  <li>A program that read your code, determines what it does, and if it’s grama valid</li>
</ul>

<h2 id="bigword-alert--lexical-environment">bigword alert : Lexical Environment</h2>
<ul>
  <li>where something sits physically in the code you write</li>
  <li>where you write something is IMPORTANT</li>
</ul>

<h2 id="bigword-alert--execution-contex">bigword alert : Execution Contex</h2>
<ul>
  <li>a wrapper to help manage the code that is running</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS understanding the weird parts 6-57 ~ 6-64 building objects]]></title>
    <link href="https://king4sam.github.io/blog/2017/01/17/jsuwp-5-57/"/>
    <updated>2017-01-17T23:35:42+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/01/17/jsuwp-5-57</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="function-creator-new-and-the-history-of-javascript">6-57 Function creator ‘new’, and the history of javascript</h1>

<h2 id="history-time">history time</h2>

<ul>
  <li>javascript 之所以叫 javascript，為了吸引 Java programmer XDD</li>
  <li>new constructor 也是從 Java 搬來的 (笑)</li>
</ul>

<h2 id="new">new</h2>

<ul>
  <li>a operator</li>
  <li>‘new’ create a empty object</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="c1">//Person{}, a new empty object</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">=</span> <span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">  <span class="k">this</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">=</span> <span class="nx">lastname</span><span class="p">;</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;this function is invoked&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jane</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<ol>
  <li>new create a brand new empty object</li>
  <li>the function Person() is called</li>
  <li>this in the function is point to the new empty object</li>
  <li>if the function doesn’t return a value, js engine return the new object</li>
</ol>

<h2 id="bigword-alert--function-constructors">bigword alert : Function Constructors</h2>
<ul>
  <li>A normal function that is used to construct objects.</li>
  <li>‘this’ points to a new empty object.</li>
  <li>the new empty object is returned from the funciton automatically.</li>
</ul>

<p>後記:
我到現在才知道在js裡，new後面的是一個function…囧</p>

<hr />

<h1 id="function-constructor-and-prototype">6-58 Function constructor and ‘.prototype’</h1>

<h2 id="recall">Recall</h2>
<p><img src="https://king4sam.github.io/images/studynotes/dotprototype.jpg" /></p>

<ul>
  <li>
    <p>.prototype (property) is used only by functions</p>
  </li>
  <li>
    <p>.property is the prototype of any object created(use ‘new’)</p>
  </li>
  <li>
    <p>__proto__  is in all objects(includeing functions)</p>
  </li>
  <li>
    <p>__proto__ is the prototype of the the object</p>
  </li>
</ul>

<p>.prototype 是改變所有new 出來的新object 的 prototype</p>

<p>看下面例子，john.__proto__ 指向 Person.prototype</p>

<ul>
  <li>good js code sets properties inside the function constructor. But methods are set on the prototype.</li>
</ul>

<p>∵ methods(function) 也是object，放在function contstrctor，變成每個new 出來的都有一份 methods 的copy
但它們只做一樣的事情 -&gt; 浪費記憶體</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">=</span> <span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">=</span> <span class="nx">lastname</span><span class="p">;</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;This function is invoked.&#39;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastname</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">jane</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jane</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getFormalFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">.</span><span class="nx">getFormalFullName</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="dangerous-aside--new-and-function">6-59 Dangerous aside : new and function</h1>

<ul>
  <li>
    <p>if we invoked a function constructor without new , the function is still run. However, the function will return undefined in default.</p>
  </li>
  <li>
    <p>use capital letter for function constructor</p>
  </li>
</ul>

<h1 id="conceuptual-aside--build-in-function-constructor">6-60 conceuptual Aside : build-in function constructor</h1>

<h2 id="autobox">autobox</h2>

<figure class="code"><figcaption><span>build-in function constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class="line"><span class="c1">// creating Number object, not primitive type</span>
</span><span class="line">
</span><span class="line"><span class="s2">&quot;John&quot;</span><span class="p">.</span><span class="nx">length</span> <span class="c1">//4</span>
</span><span class="line"><span class="c1">// primitive has no methods</span>
</span><span class="line"><span class="c1">//js engine autobox the primitive string into Object String</span>
</span><span class="line">
</span><span class="line"><span class="mi">3</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">;</span> <span class="c1">//err, js doesn&#39;t do autobox on numbers</span>
</span></code></pre></td></tr></table></div></figure>

<figure class="code"><figcaption><span>js easy enhance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// add new method to origin String Object</span>
</span><span class="line"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isLengthGreaterThan</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">limit</span><span class="p">){</span>
</span><span class="line">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">limit</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">.</span><span class="nx">isLengthGreaterThan</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="dangerous-aside-build-in-function-constructor">6-61 Dangerous Aside: build-in function constructor</h1>

<ul>
  <li>is better not to use (primitive tpye) built-in function constructors</li>
  <li>deal with date : moment.js</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span> <span class="c1">//true</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span> <span class="c1">// false</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">);</span> <span class="c1">//convert string to primitive number</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="dangerous-aside--arrays-and-forin">6-62 Dangerous Aside : Arrays and for…in</h1>

<ul>
  <li>index(0,1,2…) is the property name</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// Array.prototype.myCustomFeature = &#39;cool!&#39;;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;John&#39;</span><span class="p">,</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span><span class="s1">&#39;Jim&#39;</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">){</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">prop</span> <span class="o">+</span> <span class="s1">&#39; : &#39;</span> <span class="o">+</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">prop</span><span class="p">]);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">0 : John</span>
</span><span class="line"><span class="cm">1 : Jane</span>
</span><span class="line"><span class="cm">2 : Jim</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">0 : John</span>
</span><span class="line"><span class="cm">1 : Jane</span>
</span><span class="line"><span class="cm">2 : Jim</span>
</span><span class="line"><span class="cm">myCustomFeature : cool!</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="c1">// use standard for loop to avoid this</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="objectcreate-and-pure-prototypal-inheritance">6-63 Object.create and Pure Prototypal Inheritance</h1>

<ul>
  <li>Pure Prototypal Inheritance</li>
  <li>Object.create create a empty object with prototype point to the argument</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">firstname</span> <span class="o">:</span> <span class="s1">&#39;Default&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">lastname</span> <span class="o">:</span> <span class="s1">&#39;Default&#39;</span><span class="p">,</span>
</span><span class="line">  <span class="nx">greet</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="s1">&#39;Hi&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// this point to the object person</span>
</span><span class="line">    <span class="c1">// if there is no this, js engine would find firstname in greet function&#39;s execution context</span>
</span><span class="line">    <span class="c1">// then find firstname in outer environment(in this case, it&#39;s global object)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
</span><span class="line"><span class="c1">// john has default name!! because of the prototype</span>
</span><span class="line">
</span><span class="line"><span class="nx">john</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">=</span> <span class="s1">&#39;John&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">john</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">=</span> <span class="s1">&#39;Doe&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>if browser doesn’t support Object.create… Polyfill!!</p>

<h2 id="bigword-alert--polyfill">bigword alert : Polyfill</h2>
<ul>
  <li>code that adds a feature the engine may lack</li>
</ul>

<figure class="code"><figcaption><span>object.create polyfill</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">//if object.create not exist, undefined</span>
</span><span class="line"><span class="c1">// undefined is coerced to boolean</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Object.create implementation&#39;</span>
</span><span class="line">      <span class="o">+</span> <span class="s1">&#39; only accepts the first parameter.&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">F</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">firstname</span><span class="o">:</span> <span class="s1">&#39;Default&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">lastname</span><span class="o">:</span> <span class="s1">&#39;Default&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="nx">greet</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s1">&#39;Hi &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class="line"><span class="nx">john</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">=</span> <span class="s1">&#39;John&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">john</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">=</span> <span class="s1">&#39;Doe&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h1 id="es6-and-classes">6-64 ES6 and Classes</h1>

<ul>
  <li>ES6 has new keywords : class</li>
  <li>但作者認為這只是個syntatic sugur, 本質上還是 prototypal inheritance</li>
  <li>仍然建議使用prototypal inheritance 的方式</li>
</ul>

<figure class="code"><figcaption><span>ES6 class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// note that this is a Object, a created object</span>
</span><span class="line"><span class="c1">// it exist in memory already</span>
</span><span class="line"><span class="kr">class</span> <span class="nx">Person</span><span class="p">{</span>
</span><span class="line">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">){</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">=</span> <span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">lastname</span> <span class="o">=</span> <span class="nx">lastname</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="nx">greet</span><span class="p">(){</span>
</span><span class="line">  <span class="k">return</span> <span class="s1">&#39;Hi &#39;</span> <span class="o">+</span> <span class="nx">firstname</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"> <span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Doe&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
</feed>
