<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Service_security | Necisam's blog]]></title>
  <link href="https://king4sam.github.io/blog/categories/service-security/atom.xml" rel="self"/>
  <link href="https://king4sam.github.io/"/>
  <updated>2017-04-28T00:08:36+08:00</updated>
  <id>https://king4sam.github.io/</id>
  <author>
    <name><![CDATA[Necisam]]></name>
    <email><![CDATA[king4sam990816@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SS-week2]]></title>
    <link href="https://king4sam.github.io/blog/2017/04/27/ss-week2/"/>
    <updated>2017-04-27T15:48:18+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/04/27/ss-week2</id>
    <content type="html"><![CDATA[<h1 id="information-theory">Information Theory</h1>

<!--more-->

<h2 id="information-storage">Information Storage</h2>

<p>訊號分成 analog 跟 digital</p>

<p>大致討論的結果(只記得這些…)</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">type</th>
      <th>pros</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">digital</td>
      <td>電腦可讀 可驗證 易編輯</td>
    </tr>
    <tr>
      <td style="text-align: left">analog</td>
      <td>能保存較原始資料</td>
    </tr>
  </tbody>
</table>

<p>2000年後 digit 資料量爆炸性成長</p>

<p><img src="http://media3.washingtonpost.com/wp-dyn/content/graphic/2011/02/11/GR2011021100614.jpg"></p>

<h2 id="information-value">Information Value</h2>

<h3 id="more-information">More Information?</h3>

<p>左邊 還是 右邊 給我們比較<strong>多</strong>的資訊???</p>

<p><img src="/images/ss/infovalue.png"></p>

<p>幾乎大家一致認同左邊</p>

<p>但那是因為左邊是我們認得的語言</p>

<p>想像如果右邊是另一種語言</p>

<p>可能不同的音調、個數、行數等等都代表不同意義</p>

<p>這樣右邊會不會也是能帶給我們跟左邊一樣的資訊量呢🤔🤔🤔</p>

<h3 id="measure-information-value">Measure Information value</h3>

<p>那我們又如何衡量資訊的價值呢?</p>

<p>試問下面三個投擲硬幣的結果
那一個sequence比較有價值?</p>

<p><img src="/images/ss/measureinfo.png"></p>

<p><em>Hint : 隨便挖掉其中一個擲硬幣的結果，你有辦法填回去嗎?</em></p>

<p>明顯的two-head coin 我們可以直接填H回去</p>

<p>weighted coin 我們會猜H(H 出現機率比較大)</p>

<p>而fair coin 我們就無法做出猜測</p>

<h4 id="information-entropy">Information Entropy</h4>
<p>disorder, unpredictability, uncertainty of information</p>

<p>(記得高中老師說熵就是亂度</p>

<p>以下的計算皆以密碼為例</p>

<p>可用字元 b 個
密碼長度 n 個</p>

<p>可用密碼數(combinations)</p>

<script type="math/tex; mode=display">b^{n}</script>

<p>存儲密碼所需要的位元數(bits of entropy)</p>

<script type="math/tex; mode=display">\log{b^{n}}</script>

<h4 id="shannon-entropy-entropy-of-given-set-of-characters">Shannon Entropy( Entropy of given set of characters)</h4>

<ul>
  <li>
    <p>整串密碼中每個字的平均消息量</p>
  </li>
  <li>
    <p>How many questions would we expect to ask to find an element from a set of characters?</p>
  </li>
  <li>
    <p>char出現時所需要問的次數的期望值
  = 每個char出現的機率 * 出現時所需要問題次數</p>
  </li>
  <li>
    <p>formula</p>
  </li>
</ul>

<script type="math/tex; mode=display">H(X) = E[I(X)] = E[-\ln(P(X))]
\\
H(X) = \Sigma{P(x_i)I(x_i)} = - \Sigma{P(x_i)\log_b{P(x_i)}}, b = 2</script>

<ul>
  <li>implement</li>
</ul>

<p><code>ruby Shannon Entropy in ruby
def entropy (str)
  e = 0
  sz = str.bytesize.to_f
  b = str.bytes
  0.upto(255) do |i|
    x = b.count(i)/sz
    if x &gt; 0
      e += - x * (Math.log(x)/ Math.log(2))
    end
  end
  e
end
</code>
但當我們在用Shannon Entropy下去對密碼做分析的話</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">password type</th>
      <th style="text-align: center">sample password</th>
      <th style="text-align: right">bits of entropy</th>
      <th style="text-align: right">Shannon Enrtopy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">length = 8, lowercase letters only</td>
      <td style="text-align: center">cvobmsla</td>
      <td style="text-align: right">37.60</td>
      <td style="text-align: right">3.0</td>
    </tr>
    <tr>
      <td style="text-align: center">length = 8, lowercase + uppercase letters</td>
      <td style="text-align: center">jAcieDlq</td>
      <td style="text-align: right">45.60</td>
      <td style="text-align: right">3.0</td>
    </tr>
    <tr>
      <td style="text-align: center">length = 8, letters + digits</td>
      <td style="text-align: center">bA29Fs4f</td>
      <td style="text-align: right">47.63</td>
      <td style="text-align: right">3</td>
    </tr>
    <tr>
      <td style="text-align: center">whole words<br />(4 words chosen at random from 2048 word dictionary)</td>
      <td style="text-align: center">placidmealerrorpast</td>
      <td style="text-align: right">44</td>
      <td style="text-align: right">3.53</td>
    </tr>
  </tbody>
</table>

<p>增加了char，密碼變的更複雜，但似乎沒有增加enyropy</p>

<p>反而是原先認為容易被字典攻擊法攻擊的whole word 表現不差</p>

<p>而且雖然英數字組合的bits of entropy高，但人類不會偏好隨機的組合</p>

<p>因此實際會被用的組合數還要再下修</p>

<p>反觀whole word的組合數就是真實中的problem space -&gt; 沒有捷徑猜密碼</p>

<p><strong>People who don’t understand information theory and security</strong></p>

<p>別期待user會使用隨機組合的密碼</p>

<p>(譯: 過去二十年，我們努力讓每個人用人類更難記，但電腦很好猜的密碼)
<img src="https://imgs.xkcd.com/comics/password_strength.png"></p>

<hr />

<p>後面是開發環境介紹跟一些bit operation</p>

<p>我就略過</p>

<p>但要特別筆記一下XOR</p>

<p>真值表大家都會記</p>

<p>重點是xor有這個特質</p>

<script type="math/tex; mode=display">P \oplus K = C
\\
C \oplus K = P</script>

<p>這個magic讓xor在一些地方有神奇功用</p>

<p>例如</p>

<ul>
  <li>兩數互換不用第三個變數</li>
</ul>

<p><code>c
void swap(int *a, int *b){
  if(*a != *b) {
      *a = *a ^ *b;
      *b = *a ^ *b;
      *a = *a ^ *b;
  }
}
</code>
- One-time Pad Cipher(week4)</p>

<ul>
  <li>某天寄來的code challenge</li>
</ul>

<p>implements function</p>

<p>xor product(N,M) = N ^ N+1 … ^ M-1 ^ M</p>

<p>要求</p>

<p>complexity O(log(N))</p>

<p>mem space usage O(1)</p>

<p>其實看到log(N)就大概想應該是要binary下去找</p>

<p>後來看到一個解法</p>

<p>令f(n) = xor product(0,n)</p>

<p>發現有規律</p>

<p>0000 &lt;- 0  [a]<br />
0001 &lt;- 1  [1]<br />
0010 &lt;- 3  [a+1]<br />
0011 &lt;- 0  [0]<br />
0100 &lt;- 4  [a]<br />
0101 &lt;- 1  [1]<br />
0110 &lt;- 7  [a+1]<br /></p>

<p>b(n) 用來查表 求出 xor product(0,n) 跟 xor product(0,m)</p>

<p>兩個再做xor 就會變成 xor product(n,m)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS-week1]]></title>
    <link href="https://king4sam.github.io/blog/2017/04/19/ss-week1/"/>
    <updated>2017-04-19T23:37:56+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/04/19/ss-week1</id>
    <content type="html"><![CDATA[<h1 id="security-and-service">Security and Service</h1>

<!--more-->

<p>既然課名都叫 Security and Security
一開始當然是先討論什麼是 Security，什麼是 Security</p>

<h2 id="security">security</h2>

<ul>
  <li>Scenario A: Traveling in a foreign country</li>
  <li>Scenario B: Shopping online at a new website</li>
</ul>

<p>年代久遠，我忘記當初到底討論出哪些點了 😩</p>

<p>總之寫了四分之一黑板</p>

<p>而這些點最後又被歸類為以下六個面向</p>

<h2 id="information-security-dimensions">Information Security Dimensions</h2>
<ul>
  <li>Availability : available for operation and use
<br />可用性</li>
  <li>Authentication : prove who you are
<br />身份驗證</li>
  <li>Authorization : the accessment to the information
<br />授權</li>
  <li>Confidentiality : confidential is protected
<br />保密</li>
  <li>Integrity : the quality of being honest
<br />可以偵測資料是否被竄改過</li>
  <li>Non-repudiation :
<br />不可否認性(ex 發票證明交易確實發生過)</li>
</ul>

<p>最後再提供一些新聞，大家討論問題是發生在哪個面向</p>

<p><img src="/images/ss/hospital_robbed.png">
<img src="/images/ss/zomato.png"></p>

<h2 id="service">Service</h2>

<p>沒有討論太多，記得是認為</p>

<p>providing values 就是個 Service</p>

<p><del>順便幫下學期的soa打個廣告XDD<del></del></del></p>

<hr />

<h2 id="meet-your-tools">Meet Your Tools</h2>

<p>這學期會用的都有以下特質</p>

<ul>
  <li>Free</li>
  <li>Open Source</li>
  <li>Low-level Mastery</li>
</ul>

<h2 id="ruby">ruby</h2>

<p>老師說他最愛readable的特性</p>

<h2 id="linux">linux</h2>
<p>身為攻城獅你說你不會用linux?</p>

<p>大三屁孩或用mac裝潮的就算了</p>

<p>我絕對不是說當助教時遇到的奇葩學生</p>

<h2 id="codecademy">Codecademy</h2>
<p>Learn to code interactively, for free.</p>

<h2 id="canvas-and-slack">Canvas and Slack</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS-week7]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/31/ss-week7/"/>
    <updated>2017-03-31T10:37:03+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/31/ss-week7</id>
    <content type="html"><![CDATA[<h1 id="web-services-and-security">Web Services and Security</h1>

<!--more-->

<h2 id="internet-and-tcpip">Internet and TCP/IP</h2>

<ul>
  <li><a href="http://www.youtube.com/watch?v=9hIQjrMHTv4">科普時間</a></li>
  <li>但老師連字幕都沒開變成在聽力測驗QQ</li>
</ul>

<h2 id="http">HTTP:</h2>

<ul>
  <li>Persistent but Stateless</li>
  <li>not a whole conversation</li>
  <li>just a line of message/request</li>
  <li>
    <p>Request and Resoinse Msg</p>
  </li>
  <li>(HTTPie)[https://httpie.org] : cmd tool designed for painless debugging and interaction with HTTP servers, RESTful APIs, and web services</li>
</ul>

<h2 id="http-methods">HTTP methods</h2>

<ul>
  <li>Safety : Never change the resources</li>
  <li>Idempotence : can be called many times without different outcome</li>
</ul>

<table>
  <thead>
    <tr>
      <th>HTTP method</th>
      <th>Safety</th>
      <th>Idempotence</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GET</td>
      <td>Y</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>POST</td>
      <td>N</td>
      <td>N</td>
    </tr>
    <tr>
      <td>PUT</td>
      <td>N</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>DELETE</td>
      <td>N</td>
      <td>Y</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>usage example :
google search use GET method
GET parameter is saved in url so that you can save the search result as a bookmark</li>
</ul>

<h2 id="http-status-code">HTTP status code</h2>

<ul>
  <li>DON’T be lazy, lookup  the <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">table</a></li>
</ul>

<hr />

<h1 id="happycoding-time--">Happy(Coding) time ~ 之前要先有</h1>

<h1 id="section">出場人員介紹👏👏👏</h1>

<h2 id="sinatrahttpsgithubcomsinatrasinatra"><a href="https://github.com/sinatra/sinatra">Sinatra</a></h2>
<ul>
  <li>Web Application Framework</li>
  <li>Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort
(介紹就這麼簡短，官網甚至一進去只看到sample code)</li>
</ul>

<h3 id="run-server">run server</h3>

<ul>
  <li>Execute Rack based web application as per config.ru</li>
</ul>

<p><code>bat
rackup
</code></p>

<h2 id="bundlerhttpbundlerio"><a href="http://bundler.io">Bundler</a></h2>
<ul>
  <li>provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed.</li>
</ul>

<h3 id="install">install</h3>

<p><code>bat
gem install bundler
</code></p>

<h3 id="execution">execution</h3>

<p><code>bat
bundle install
</code></p>

<ul>
  <li>Gemfile.lock stores which version of gems should be installed</li>
</ul>

<h3 id="executionsuggestion">execution(suggestion)</h3>

<p><code>bat
bundle exec rake
</code></p>

<ul>
  <li>ensures following command is only run with gems specified in Gemfile.lock</li>
</ul>

<h2 id="rakehttpsgithubcomrubyrake"><a href="https://github.com/ruby/rake">rake</a></h2>
<ul>
  <li>Ruby make</li>
</ul>

<h3 id="simple-example">simple example</h3>

<p>``` ruby task simple</p>

<p>task default: %w[test]
task :test do
  ruby “test/unittest.rb”
end</p>

<p>```</p>

<hr />

<h1 id="coding-time">真正的coding time~</h1>

<p>Ruby 語法的部分就略過不說了</p>

<h2 id="model">model</h2>
<ul>
  <li>一般的class</li>
  <li>這次spec 要求implement 下列 methods
    <ul>
      <li>initialize</li>
      <li>save</li>
      <li>find</li>
      <li>all</li>
      <li>to_json</li>
    </ul>
  </li>
</ul>

<h2 id="controller">controller</h2>
<ul>
  <li>必需繼承 Sinatra::Base, rack才認得它</li>
  <li>requirement
    <ul>
      <li>get /sourece : return details of a specific resource</li>
      <li>get /sourece/id : return an index of all resources</li>
      <li>post : create a new resource</li>
    </ul>
  </li>
</ul>

<p>``` ruby</p>

<p>class ShareConfigurationsAPI &lt; Sinatra::Base
  configure do
    #Configure Sinatra settings
  end</p>

<p>get ‘/?’ do
    # root route for anything
  end</p>

<p>post ‘/api/v1/configurations/?’ do
    # a post route
  end
end</p>

<p>```</p>

<hr />

<h2 id="security-threats">Security Threats</h2>

<p>當然目前的服務很簡單，也有很多漏洞
下面列了一些，之後我們都會一個一個來解決</p>

<ul>
  <li>Threat: Confidentiality
    <ul>
      <li>Stored resources could be stolen if server is compromised</li>
      <li>Vulnerability: User resources are not being encrypted</li>
      <li>Vector: Attacker with access to server can read whole data store</li>
    </ul>
  </li>
  <li>Threat: Authorization, Authentication
    <ul>
      <li>Information about resources is not private</li>
      <li>Vulnerability: App does not check if user is authorized to see resource</li>
      <li>Vector: Anyone can access any data by knowing its public URL</li>
    </ul>
  </li>
  <li>Threat: Integrity, Bug
    <ul>
      <li>:id random key generator could produce collisions</li>
      <li>Vulnerability: random key generator produces same keys within given second</li>
      <li>Vector: send multiple POST ‘/resource’ requests within same second</li>
    </ul>
  </li>
  <li>Threat: Integrity
    <ul>
      <li>User could destroy earlier resources</li>
      <li>Vulnerability: app does not check if :id key is being sent along with POST request</li>
      <li>Vector: send :id along with POST request to see if app overwrite earlier resource</li>
    </ul>
  </li>
  <li>Threat: All dimensions
    <ul>
      <li>Dependencies (gems) could have vulnerabilities</li>
      <li>Vulnerability: gems could allow attacks (denial of service, remote code execution, etc.)</li>
      <li>Vector: send a payload to a route that will likely invoke a particular dependency (gem)</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS Week5]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/27/ss-week5/"/>
    <updated>2017-03-27T14:19:35+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/27/ss-week5</id>
    <content type="html"><![CDATA[<h1 id="symmetric-cryptographycont">Symmetric Cryptography(Con’t)</h1>

<!--more-->

<h2 id="stream-ciphers">Stream Ciphers</h2>

<ol>
  <li>A5/1 Cipher (GSM)
    <ul>
      <li>Produces keystream bit at each step</li>
      <li>Easy to implement in hardware</li>
    </ul>
  </li>
</ol>

<p><img src="/images/studynotes/a51.png">
2. RC4 Cipher</p>

<ul>
  <li>Produces keystream byte at each step</li>
  <li>One of the most widely used software stream ciphers
    <ul>
      <li>in older implementations of SSL /TLS; WEP(!)</li>
      <li>removed from major browsers in 2015</li>
    </ul>
  </li>
</ul>

<h2 id="block-ciphers">Block Ciphers</h2>

<ol>
  <li>Feistel Cipher
    <ul>
      <li>key will change every round</li>
      <li>function F must be reversible</li>
      <li>multiple “rounds”</li>
    </ul>
  </li>
</ol>

<p><img src="/images/studynotes/feistel.png"></p>

<h2 id="block-cipher-modes">Block Cipher Modes</h2>

<ol>
  <li>Electronic Code Book (ECB) Mode
  <img src="/images/studynotes/ecb.png">
    <ul>
      <li>將plain text切成 blocks</li>
      <li>分別對每個block做Block Ciphers</li>
      <li>缺點:同樣的block會被加密成同樣的cipher</li>
      <li>diffusion較差</li>
    </ul>
  </li>
  <li>Cipher Block Chaining (CBC) Mode
  <img src="/images/studynotes/cbc.png">
    <ul>
      <li>跟ECB類似</li>
      <li>在做完Block Ciphers，會在跟前一個block的結果做xor，成為最後加密的結果</li>
      <li>改善diffusion</li>
      <li>最後一個block可以當<a href="#data-integrity-mac-blocksmessage-authentication-code">MAC</a> blocks(包含整個plain text的資訊)</li>
    </ul>
  </li>
  <li>Comparison</li>
</ol>

<p>ECB   V.S  CBC</p>

<p><img src="/images/studynotes/ecbgirl.png" width="280"><img src="/images/studynotes/cbcgirl.png" width="280"></p>

<h2 id="aes-cipher">AES Cipher</h2>
<ul>
  <li>most popular nowadays</li>
</ul>

<p><img src="/images/studynotes/aes.png"></p>

<h2 id="symmetric-key-ciphers-and-key-reuse">Symmetric Key Ciphers and Key Reuse</h2>

<ul>
  <li>Depth Attacks : Giving attackers deeper information about your plaintext or key
    <ul>
      <li>例如之前的one-time pad ，當key重複使用時，攻擊者可以得知P1 ⊕ P2</li>
    </ul>

    <p><img src="/images/studynotes/depthattack.png"></p>
  </li>
  <li>Replay Attacks:
    <ul>
      <li>當攻擊者監聽到一個Ciphers，傳送給對應的人，一樣可以得到正確的回覆</li>
    </ul>

    <p><img src="/images/studynotes/replyattack.png"></p>
  </li>
</ul>

<h2 id="using-a-nonceone-time-use-random-bytes">Using a Nonce(one-time use random bytes)</h2>

<ul>
  <li>
    <p>Countering Depth Attacks :
  當key重複使用時，還是可以因為nonce不同，而加密成不同的cipher</p>
  </li>
  <li>
    <p>Countering Replay Attacks :
  當攻擊者監聽到一個Ciphers，想要重送時，會因為Nonce不同，而被拒絕。</p>
  </li>
</ul>

<hr />

<h1 id="hashing">Hashing</h1>

<ul>
  <li>No key from the user (built-in key)</li>
  <li>One-way function only (cannot reverse/decrypt)</li>
  <li>Compresses data to fixed length (e.g., 128-bits)</li>
  <li>Collisions exist, but should be extremely rare</li>
</ul>

<h2 id="non-cryptographic-hashing">Non-cryptographic Hashing</h2>

<ul>
  <li>Cyclic Redundancy Check (CRC)
    <ul>
      <li>👍 Data Lookup</li>
      <li>👎 Data integrity</li>
    </ul>

    <p><strong>pro</strong></p>

    <ul>
      <li>simple to perform in hardware</li>
      <li>can catch common, unintentional errors</li>
    </ul>

    <p><strong>cons</strong></p>

    <ul>
      <li>cannot catch intentional manipulation</li>
      <li>easy to revers</li>
      <li>crc(x⊕y⊕z) = crc(x) ⊕ crc(y) ⊕ crc(z)
well-known design flaws of the Wired Equivalent Privacy (WEP) protocol</li>
    </ul>
  </li>
</ul>

<h2 id="cryptographic-hashing">Cryptographic Hashing</h2>
<ul>
  <li>Sha1 sha2</li>
  <li>md5</li>
  <li>…</li>
</ul>

<h2 id="data-integrity-mac-blocksmessage-authentication-code">Data Integrity: MAC blocks(Message Authentication Code)</h2>
<ul>
  <li>protects both a message’s data integrity as well as its authenticity, by allowing verifiers to detect any changes to the message content.</li>
  <li>在解密前先驗證資料來源及正確性(有沒有被變更)</li>
  <li>沒有先驗證就解密的話，攻擊者能從更改後的cipher跟plaintext中得到額外的訊息</li>
</ul>

<h3 id="approaches-to-authenticated-encryption">Approaches to Authenticated Encryption</h3>

<ol>
  <li>MAC-and-Encrypt
    <ul>
      <li>encrypy the plaintextthen calculate MAC on plaintext</li>
    </ul>
  </li>
  <li>MAC-then-Encrypt (MtE)
    <ul>
      <li>calculate MAC on plaintext and encrypt plaintext + MAC</li>
      <li>vulnerable to Decryption Oracle Attack</li>
      <li>∵ you have to perform decryption before Authenticated</li>
    </ul>
  </li>
  <li>Encrypt-then-MAC
    <ul>
      <li>encrypy the plaintext then calculate MAC on cipher</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="coding-time-">Coding time ~</h1>

<p>So many things to care about</p>

<ul>
  <li>which algorithm to apply(must be not broken yet)</li>
  <li>implements a algorithm wihout making mistake</li>
  <li>generate different keys</li>
  <li>use nonce</li>
  <li>Authenticated Encryption order</li>
</ul>

<p><img src="/images/fun/Jackie-chan-meme.jpg"></p>

<h2 id="developers-should-know-about-cryptography"><strong><em>Developers should know about cryptography!</em></strong></h2>

<h2 id="but-only-cryptographers-should-write-ciphers"><strong><em>But only cryptographers should write ciphers!</em></strong></h2>

<h2 id="nacl">NaCl</h2>

<ul>
  <li>NaCl : a new easy-to-use highspeed software library for network communication, encryption, decryption, signatures, etc.</li>
</ul>

<p>Implemented in C</p>

<ul>
  <li>libSodium :  portable, cross-compilable, installable, packageable fork of NaCl</li>
</ul>

<p>Implemented in C</p>

<ul>
  <li>RbNaCl : Ruby binding to the Networking and Cryptography (NaCl) library</li>
</ul>

<p>Implemented in Ruby, but you have to install libSodium yourself</p>

<ul>
  <li>rbnacl-libsodium : packages the libsodium library as a Ruby Gem</li>
</ul>

<p>Implemented in Ruby, the only thing to do is
<code>gem install rbnacl-libsodium</code></p>

<p><a href="https://github.com/cryptosphere/rbnacl/wiki">Document of RbNaCl</a></p>

<p>灑花(<em>￣▽￣)/‧☆</em>”’ *-.,<em>,.-*’`“*-.,</em>☆</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SS Week4]]></title>
    <link href="https://king4sam.github.io/blog/2017/03/25/ss-week4/"/>
    <updated>2017-03-25T23:42:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/03/25/ss-week4</id>
    <content type="html"><![CDATA[<h1 id="cryptography-begining">Cryptography Begining</h1>

<!--more-->

<h2 id="symmetric-key-cryptography">Symmetric Key Cryptography</h2>

<ul>
  <li>use the same key to encrypt and decrypt</li>
</ul>

<p><img src="/images/studynotes/samekey.png" /></p>

<h2 id="confusion-and-diffusion-of-information">Confusion and Diffusion of Information</h2>

<ul>
  <li>
    <p>Confusion : key 改變一個bit，cipher改變的程度</p>
  </li>
  <li>
    <p>Diffusion : plaintext 改變1個bit，cipher 改變的程度</p>
  </li>
</ul>

<p><img src="/images/studynotes/condiff.png" /></p>

<h2 id="what-makes-a-cipher-secure-">What makes a cipher “secure” ?</h2>

<ul>
  <li>
    <p>There are no shortcut attacks. Exhaustive key search required.</p>
  </li>
  <li>
    <p>It(the cryptography system) must not be required to be secret, and it must be able to fall into the hands of the enemy without inconvenience.
<em>(Kerckhoffs Principle)</em></p>
  </li>
</ul>

<h2 id="sk-cryptography">SK-Cryptography</h2>

<p><strong>1. Caeser Cipher</strong></p>

<p>shift each char by n</p>

<p><img src="/images/studynotes/caeser.png">
<strong>2. Permutation Cipher</strong></p>

<p>把原文的char一組做順序上的掉換</p>

<p><img src="/images/studynotes/permutation.png"></p>

<p>破解 : Frequency attack<br />
<strong>3. Codebook Cipher</strong></p>

<p>建表查表XDD</p>

<p><img src="/images/studynotes/codebook.png">
<strong>4. Double Transposition Cipher</strong></p>

<p><img src="/images/studynotes/dtrans.png">
<strong>5. One-time Pad Cipher</strong></p>

<p>Encrypt : P ⊕ K = C</p>

<p>Decrypt : C ⊕ K = P</p>

<p>Note : when reusing the same key gives attackers additional information</p>

<p>∵ C1 ⊕ C2 = P1 ⊕ K ⊕ P2 ⊕ K = P1 ⊕ P2</p>

<p>當攻擊者得知你任一個plaintext，就能解出所有plaintext</p>
]]></content>
  </entry>
  
</feed>
