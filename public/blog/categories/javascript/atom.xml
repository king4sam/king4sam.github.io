<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Necisam's blog]]></title>
  <link href="https://king4sam.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://king4sam.github.io/"/>
  <updated>2017-04-20T00:47:14+08:00</updated>
  <id>https://king4sam.github.io/</id>
  <author>
    <name><![CDATA[Necisam]]></name>
    <email><![CDATA[king4sam990816@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jsuwp-9-73 ~ 9-80 Let's Build a Framework/library]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library/"/>
    <updated>2017-02-25T01:04:51+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/25/jsuwp-9-73-lets-build-a-framework-slash-library</id>
    <content type="html"><![CDATA[<h1 id="requirements">9-73 Requirements</h1>

<ul>
  <li>Greeter</li>
  <li>input : firstname lastname and optional language</li>
  <li>output : formal and informal greeting sentence</li>
  <li>language support English and Spanish</li>
  <li>reusable</li>
  <li>just G$() to call (no ‘new’)</li>
  <li>support jQuery(give selector, add greeting sentence to the selected element)</li>
</ul>

<!--more-->

<p>``` javascript Greeter.js</p>

<p>;(function (global, $){
  // trick , avoid the problem caused by other lib that doesn’t end with semicolon</p>

<p>// trick to use our lib without new
  // function declare, it is not actually run
  // so we can set Greeter.init later
  var Greeter = function(firstName,lastName,language){
    return new Greeter.init(firsname,lastname,language);
  }</p>

<p>// setup prototype of greeter
  Greeter.prototype = {
    fullName : function(){
      return this.firstName + ‘ ‘ + this.lastName;
    },</p>

<pre><code>validate : function (){
  if (supportedLangs.indexOf(this.language) === -1){
    throw 'Invalid language';
  }
},

greeting : function(){
  return greetings[this.language] + ' ' + this.firstName + '!';
}

formalgreeting : function(){
  return formalgreetings[this.language] + ', ' + this.fullName;
}

greet : function (formal){
  var msg ;
  if(formal){
    msg = formalgreeting();
  }
  else{
    msg = greeting();
  }

  if(console){
    console.log(msg);
  }

  return this;
},

log : function (){
  if(console){
    console.log(logMessages[this.language] + ' : ' + this.fullName());
  }
  return this;
}

setLang : function(lang){
  this.language = lang;

  this.validate();

  return this;
},

// support jQuery
HTMLGreeting : function(selector, formal){
  if(!$){
    throw 'jQuery isnot loaded';
  }
  if(!selector){
    throw 'Missing jQuery selector';
  }
  var msg;
  else{
    msg = this.greeting()
    $(selector).html = msg;

    return this;
  }
}
</code></pre>

<p>};</p>

<p>// available in init function because of closeure
  // but these var can’t be access from global
  var supportedLangs = [‘en’,’tw’];</p>

<p>var greetings = {
    en : ‘Hello’,
    tw : ‘哈囉’
  };</p>

<p>var formalgreetings = {
    en : ‘Greetings’,
    tw : ‘你好’
  };</p>

<p>var logMessages = {
    en : ‘Logged in’,
    tw : ‘登入’
  }</p>

<p>// real constructor
  Greeter.init = function (firstName,lastName,language){
    // safe this
    // point to the object created by new ()init
    var self = this;</p>

<pre><code>// setting default value
var self.firstName = firstName || 'DefaultFirstname';
var self.lastName = lastName || 'DefaultLastname';
var self.language = language || 'en';

self.validate();   }
</code></pre>

<p>//setup prototype chain of the object created by new init()
  Greeter.init.prototype = Greeter.prototype;</p>

<p>//expose greeter to the world
  global.Greeter = global.G$ = Greeter;</p>

<p>}(window,jQuery));</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-8-69 ~ 8-72 Deep Dive Into jQuery]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery/"/>
    <updated>2017-02-20T16:39:33+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-8-70-deep-dive-into-jquery</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="jquert-part12">8-70 8-71 jQuert Part1、2</h1>

<p>``` javascript jQuery Structure</p>

<p>// IIFE</p>

<p>(function(global, factory){
  …</p>

<p>// invoked factory
  return factory(global);
}(window, function(window, noglobal){
  version = “1.11.2”,</p>

<p>// Define a local copy of jQuery
  jQuery = function( selector, context ) {</p>

<pre><code>return new jQuery.fn.init( selector, context );   },   .   .   .
</code></pre>

<p>// nickname for prototype
  jQuery.fn = jQuery.prototype ={
    …
  };</p>

<p>//Merge the contents of two or more objects together into the first object.
  jQuery.extend = jQuery.fn.extend = function() {
    …</p>

<pre><code>// jQurry habe makeArray property which is a function
makeArray: function( arr, results ) {
  var ret = results || [];

  if ( arr != null ) {
    if ( isArraylike( Object(arr) ) ) {
      jQuery.merge( ret,
        typeof arr === "string" ?
        [ arr ] : arr
      );
    } else {
      push.call( ret, arr );
    }
  }

  return ret;
}

...   }
</code></pre>

<p>//use extend to add properties on jQuery
  jQuery.extend({…});</p>

<p>// Sizzle CSS Selector Engine
  // another IIFE inside IIFE
  var Sizzle =(function (window){});</p>

<p>// real init funciton
  init = jQuery.fn.init = function( selector, context ) {
    …</p>

<pre><code>// this point to the empty object, created by calling new function
// makeArray still return this
return jQuery.makeArray( selector, this );   }
</code></pre>

<p>// set up the new object’s prototype ctreated by new
  init.prototype = jQuery.fn;</p>

<p>//window from line 8
  var
  // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,</p>

<p>// Map over the $ in case of overwrite
  _$ = window.$;</p>

<p>// Expose jQuery and $ identifiers
  if ( typeof noGlobal === strundefined ) {
    window.jQuery = window.$ = jQuery;
  }</p>

<p>return jQuery;</p>

<p>}));</p>

<p>```</p>

<hr />

<h1 id="jquert-part3">8-73 jQuert Part3</h1>

<h2 id="bigword-alert--method-chaining">bigword alert : Method chaining</h2>
<ul>
  <li>calling one method after another, and each method affects the parent object.</li>
  <li>obj.method1().method2()</li>
</ul>

<h2 id="how-to-implements--method-chain">how to implements  method chain</h2>
<ul>
  <li>functions return this</li>
</ul>

<p>``` javascript jquery addClass function
addClass: function( value ) {
    var classes, elem, cur, clazz, j, finalValue,
      i = 0,
      len = this.length,
      proceed = typeof value === “string” &amp;&amp; value;</p>

<pre><code>if ( jQuery.isFunction( value ) ) {
  return this.each(function( j ) {
    jQuery( this ).addClass( value.call( this, j, this.className ) );
  });
}

if ( proceed ) {
  // The disjunction here is for better compressibility (see removeClass)
  classes = ( value || "" ).match( rnotwhite ) || [];

  for ( ; i &lt; len; i++ ) {
    elem = this[ i ];
    cur = elem.nodeType === 1 &amp;&amp; ( elem.className ?
      ( " " + elem.className + " " ).replace( rclass, " " ) :
      " "
    );

    if ( cur ) {
      j = 0;
      while ( (clazz = classes[j++]) ) {
        if ( cur.indexOf( " " + clazz + " " ) &lt; 0 ) {
          cur += clazz + " ";
        }
      }

      // only assign if different to avoid unneeded rendering.
      finalValue = jQuery.trim( cur );
      if ( elem.className !== finalValue ) {
        elem.className = finalValue;
      }
    }
  }
}

return this;   }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-7-65 ~ 7-68 Odds and Ends]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends/"/>
    <updated>2017-02-20T15:29:15+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/20/jsuwp-7-65-odds-and-ends</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="initialization">7-65 Initialization</h1>

<ul>
  <li>use literal notaion to initialization</li>
  <li>convenient for testing</li>
  <li>js engine will check syntax for you</li>
</ul>

<p>``` javascript simple initialization</p>

<p>var people = [
  {
    firstname : ‘John’,
    lastname : ‘Doe’,
    address : [
      ‘111 Main St.’,
      ‘others’
    ]
  },
  {
    firstname : ‘Jane’,
    lastname : ‘Doe’,
    greet : function (){
      return ‘Hi ‘;
    }
  }
]</p>

<h2 id="section">```</h2>

<h1 id="typeof-instanceof">7-66 typeof instanceof</h1>

<ul>
  <li>
    <p>typeof : return the type name in String</p>
  </li>
  <li>
    <p>some unexpected result : [], undefined, null</p>
  </li>
  <li>
    <p>instanceof : find in deeper prototype chain, check if the type in the chain</p>
  </li>
</ul>

<p>``` javascript</p>

<p>var a = 3;
console.log(typeof a);</p>

<p>var b = “Hello”;
console.log(typeof b);</p>

<p>var c = {};
console.log(typeof c);</p>

<p>var d = [];
console.log(typeof d); // weird!
console.log(Object.prototype.toString.call(d)); // better!</p>

<p>function Person(name) {
    this.name = name;
}</p>

<p>var e = new Person(‘Jane’);
console.log(typeof e);
console.log(e instanceof Person);</p>

<p>console.log(typeof undefined); // makes sense
console.log(typeof null); // a bug since, like, forever…</p>

<p>var z = function() { };
console.log(typeof z);</p>

<p>```</p>

<hr />

<h1 id="strict-mode">7-67 Strict Mode</h1>

<ul>
  <li>optional</li>
  <li>must be in the top of file or top of the function</li>
  <li>not every js engine implement strict mode in the same way</li>
</ul>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">strict mode reference</a></p>

<ul>
  <li>可能問題
當多個js files合併時(produciton常用)，最開始的js file若使用了strict mode，則後面的files都會受到影響
不能保證其它lib都遵守strict mode</li>
</ul>

<p>``` javascript one circumstance that strict mode helps
//’use strict’;</p>

<p>function logNewPerson(){
  //’use strict’;</p>

<p>var person2;
  persom2 = {};
  console.log(persom2);
}</p>

<p>var person;</p>

<p>persom = {};
console.log(persom);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-4-33 Json and Object Literal]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb/"/>
    <updated>2017-02-12T00:51:29+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-33-json-and-object-literalb</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="json-and-object-literal">4-33 Json and object literal</h1>

<ul>
  <li>用xml傳送資料會有多餘且重複的字</li>
  <li>嘿~, js object literal 拿來送資料好像不錯用噢~</li>
  <li>property name “must” be quoted in JSON(In object literal, it could be quoted )</li>
  <li>JSON is technically a subset of object literal syntax
-&gt; valid json is also valid js object literal syntax</li>
  <li>JSON is so popular that js has utilities to tranfer between the two.(JSON.stringtify, JSON.parse)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jsuwp-4-32 Framework Aside: Faking Namespace]]></title>
    <link href="https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace/"/>
    <updated>2017-02-12T00:43:18+08:00</updated>
    <id>https://king4sam.github.io/blog/2017/02/12/jsuwp-4-32-framework-aside-faking-namespace</id>
    <content type="html"><![CDATA[<!--more-->

<h1 id="faking-namespace">4-32 Faking Namespace</h1>

<h2 id="bigword-alert--namespace"><strong>bigword alert : Namespace</strong></h2>
<ul>
  <li>a container for variables and functions</li>
</ul>

<p>``` javascript</p>

<p>greet = ‘Hello!’;
greet = ‘Hola!’;</p>

<p>// greet collide
console.log(greet);</p>

<p>var english = {};
var spanish = {};</p>

<p>english.greet = ‘Hello!’;
spanish.greet = ‘Hola!’;</p>

<p>english.greetings.greet  = ‘Hello’; // cannot creating on the fly</p>

<p>/*
var english = {
  greeting : {
    basic : ‘Hello!’
  }
};
 */</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
